//go:build go1.22

// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Send an Email with custom text
	// (POST /email/basic/send)
	SendEmail(w http.ResponseWriter, r *http.Request)
	// Get Template by Name
	// (GET /email/templates/{templateName})
	GetTemplateByName(w http.ResponseWriter, r *http.Request, templateName string)
	// Add new template
	// (POST /email/templates/{templateName})
	AddNewTemplate(w http.ResponseWriter, r *http.Request, templateName string)
	// Fill placeholders of template
	// (POST /email/templates/{templateName}/fill)
	FillTemplate(w http.ResponseWriter, r *http.Request, templateName string)
	// Get Template Placeholders
	// (GET /email/templates/{templateName}/placeholders)
	GetTemplatePlaceholdersByName(w http.ResponseWriter, r *http.Request, templateName string)
	// Send a templated Email
	// (POST /email/templates/{templateName}/send)
	SendTemplatedEmail(w http.ResponseWriter, r *http.Request, templateName string)
	// Download a static file
	// (GET /file/download/{fileName})
	DownloadFile(w http.ResponseWriter, r *http.Request, fileName string)
	// Upload a static file
	// (POST /file/upload)
	UploadFile(w http.ResponseWriter, r *http.Request)
	// Get describing html of openapi spec
	// (GET /info/openapi.html)
	GetOpenAPIHTML(w http.ResponseWriter, r *http.Request)
	// Get openapi spec as json
	// (GET /info/openapi.json)
	GetOpenAPIJSON(w http.ResponseWriter, r *http.Request)
	// Get status of the service
	// (GET /info/status)
	GetStatus(w http.ResponseWriter, r *http.Request)
	// Get version info of the service
	// (GET /info/version)
	GetVersion(w http.ResponseWriter, r *http.Request)
	// Get PDF Template by Name
	// (GET /pdf/templates/{templateName})
	GetPDFTemplateByName(w http.ResponseWriter, r *http.Request, templateName string)
	// Add new PDF template
	// (POST /pdf/templates/{templateName})
	AddNewPDFTemplate(w http.ResponseWriter, r *http.Request, templateName string)
	// Fill placeholders of PDF template
	// (POST /pdf/templates/{templateName}/fill)
	FillPDFTemplate(w http.ResponseWriter, r *http.Request, templateName string)
	// Get PDF Template Placeholders
	// (GET /pdf/templates/{templateName}/placeholders)
	GetPDFTemplatePlaceholdersByName(w http.ResponseWriter, r *http.Request, templateName string)
	// Send a SMS with custom text
	// (POST /sms/basic/send)
	SendBasicSMS(w http.ResponseWriter, r *http.Request)
	// Send a templated SMS with custom text
	// (POST /sms/template/{templateName}/send)
	SendTemplatedSMS(w http.ResponseWriter, r *http.Request, templateName string)
	// Get SMS Template by Name
	// (GET /sms/templates/{templateName})
	GetSMSTemplateByName(w http.ResponseWriter, r *http.Request, templateName string)
	// Add new SMS template
	// (POST /sms/templates/{templateName})
	AddNewSMSTemplate(w http.ResponseWriter, r *http.Request, templateName string)
	// Fill placeholders of SMS template
	// (POST /sms/templates/{templateName}/fill)
	FillSMSTemplate(w http.ResponseWriter, r *http.Request, templateName string)
	// Get SMS Template Placeholders
	// (GET /sms/templates/{templateName}/placeholders)
	GetSMSTemplatePlaceholdersByName(w http.ResponseWriter, r *http.Request, templateName string)
	// Get Workflow by Name
	// (GET /workflow/{workflowName})
	GetWorkflowByName(w http.ResponseWriter, r *http.Request, workflowName string)
	// Create a new workflow
	// (POST /workflow/{workflowName})
	CreateWorkflow(w http.ResponseWriter, r *http.Request, workflowName string)
	// Use workflow
	// (POST /workflow/{workflowName}/send)
	UseWorkflow(w http.ResponseWriter, r *http.Request, workflowName string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// SendEmail operation middleware
func (siw *ServerInterfaceWrapper) SendEmail(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SendEmail(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetTemplateByName operation middleware
func (siw *ServerInterfaceWrapper) GetTemplateByName(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "templateName" -------------
	var templateName string

	err = runtime.BindStyledParameterWithOptions("simple", "templateName", r.PathValue("templateName"), &templateName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "templateName", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTemplateByName(w, r, templateName)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AddNewTemplate operation middleware
func (siw *ServerInterfaceWrapper) AddNewTemplate(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "templateName" -------------
	var templateName string

	err = runtime.BindStyledParameterWithOptions("simple", "templateName", r.PathValue("templateName"), &templateName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "templateName", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddNewTemplate(w, r, templateName)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// FillTemplate operation middleware
func (siw *ServerInterfaceWrapper) FillTemplate(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "templateName" -------------
	var templateName string

	err = runtime.BindStyledParameterWithOptions("simple", "templateName", r.PathValue("templateName"), &templateName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "templateName", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.FillTemplate(w, r, templateName)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetTemplatePlaceholdersByName operation middleware
func (siw *ServerInterfaceWrapper) GetTemplatePlaceholdersByName(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "templateName" -------------
	var templateName string

	err = runtime.BindStyledParameterWithOptions("simple", "templateName", r.PathValue("templateName"), &templateName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "templateName", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTemplatePlaceholdersByName(w, r, templateName)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// SendTemplatedEmail operation middleware
func (siw *ServerInterfaceWrapper) SendTemplatedEmail(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "templateName" -------------
	var templateName string

	err = runtime.BindStyledParameterWithOptions("simple", "templateName", r.PathValue("templateName"), &templateName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "templateName", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SendTemplatedEmail(w, r, templateName)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DownloadFile operation middleware
func (siw *ServerInterfaceWrapper) DownloadFile(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "fileName" -------------
	var fileName string

	err = runtime.BindStyledParameterWithOptions("simple", "fileName", r.PathValue("fileName"), &fileName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "fileName", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DownloadFile(w, r, fileName)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UploadFile operation middleware
func (siw *ServerInterfaceWrapper) UploadFile(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UploadFile(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetOpenAPIHTML operation middleware
func (siw *ServerInterfaceWrapper) GetOpenAPIHTML(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetOpenAPIHTML(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetOpenAPIJSON operation middleware
func (siw *ServerInterfaceWrapper) GetOpenAPIJSON(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetOpenAPIJSON(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetStatus operation middleware
func (siw *ServerInterfaceWrapper) GetStatus(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetStatus(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetVersion operation middleware
func (siw *ServerInterfaceWrapper) GetVersion(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetVersion(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetPDFTemplateByName operation middleware
func (siw *ServerInterfaceWrapper) GetPDFTemplateByName(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "templateName" -------------
	var templateName string

	err = runtime.BindStyledParameterWithOptions("simple", "templateName", r.PathValue("templateName"), &templateName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "templateName", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPDFTemplateByName(w, r, templateName)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AddNewPDFTemplate operation middleware
func (siw *ServerInterfaceWrapper) AddNewPDFTemplate(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "templateName" -------------
	var templateName string

	err = runtime.BindStyledParameterWithOptions("simple", "templateName", r.PathValue("templateName"), &templateName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "templateName", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddNewPDFTemplate(w, r, templateName)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// FillPDFTemplate operation middleware
func (siw *ServerInterfaceWrapper) FillPDFTemplate(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "templateName" -------------
	var templateName string

	err = runtime.BindStyledParameterWithOptions("simple", "templateName", r.PathValue("templateName"), &templateName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "templateName", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.FillPDFTemplate(w, r, templateName)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetPDFTemplatePlaceholdersByName operation middleware
func (siw *ServerInterfaceWrapper) GetPDFTemplatePlaceholdersByName(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "templateName" -------------
	var templateName string

	err = runtime.BindStyledParameterWithOptions("simple", "templateName", r.PathValue("templateName"), &templateName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "templateName", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPDFTemplatePlaceholdersByName(w, r, templateName)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// SendBasicSMS operation middleware
func (siw *ServerInterfaceWrapper) SendBasicSMS(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SendBasicSMS(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// SendTemplatedSMS operation middleware
func (siw *ServerInterfaceWrapper) SendTemplatedSMS(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "templateName" -------------
	var templateName string

	err = runtime.BindStyledParameterWithOptions("simple", "templateName", r.PathValue("templateName"), &templateName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "templateName", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SendTemplatedSMS(w, r, templateName)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetSMSTemplateByName operation middleware
func (siw *ServerInterfaceWrapper) GetSMSTemplateByName(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "templateName" -------------
	var templateName string

	err = runtime.BindStyledParameterWithOptions("simple", "templateName", r.PathValue("templateName"), &templateName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "templateName", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSMSTemplateByName(w, r, templateName)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AddNewSMSTemplate operation middleware
func (siw *ServerInterfaceWrapper) AddNewSMSTemplate(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "templateName" -------------
	var templateName string

	err = runtime.BindStyledParameterWithOptions("simple", "templateName", r.PathValue("templateName"), &templateName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "templateName", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddNewSMSTemplate(w, r, templateName)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// FillSMSTemplate operation middleware
func (siw *ServerInterfaceWrapper) FillSMSTemplate(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "templateName" -------------
	var templateName string

	err = runtime.BindStyledParameterWithOptions("simple", "templateName", r.PathValue("templateName"), &templateName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "templateName", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.FillSMSTemplate(w, r, templateName)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetSMSTemplatePlaceholdersByName operation middleware
func (siw *ServerInterfaceWrapper) GetSMSTemplatePlaceholdersByName(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "templateName" -------------
	var templateName string

	err = runtime.BindStyledParameterWithOptions("simple", "templateName", r.PathValue("templateName"), &templateName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "templateName", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSMSTemplatePlaceholdersByName(w, r, templateName)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetWorkflowByName operation middleware
func (siw *ServerInterfaceWrapper) GetWorkflowByName(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "workflowName" -------------
	var workflowName string

	err = runtime.BindStyledParameterWithOptions("simple", "workflowName", r.PathValue("workflowName"), &workflowName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "workflowName", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetWorkflowByName(w, r, workflowName)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateWorkflow operation middleware
func (siw *ServerInterfaceWrapper) CreateWorkflow(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "workflowName" -------------
	var workflowName string

	err = runtime.BindStyledParameterWithOptions("simple", "workflowName", r.PathValue("workflowName"), &workflowName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "workflowName", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateWorkflow(w, r, workflowName)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UseWorkflow operation middleware
func (siw *ServerInterfaceWrapper) UseWorkflow(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "workflowName" -------------
	var workflowName string

	err = runtime.BindStyledParameterWithOptions("simple", "workflowName", r.PathValue("workflowName"), &workflowName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "workflowName", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UseWorkflow(w, r, workflowName)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       *http.ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m *http.ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m *http.ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("POST "+options.BaseURL+"/email/basic/send", wrapper.SendEmail)
	m.HandleFunc("GET "+options.BaseURL+"/email/templates/{templateName}", wrapper.GetTemplateByName)
	m.HandleFunc("POST "+options.BaseURL+"/email/templates/{templateName}", wrapper.AddNewTemplate)
	m.HandleFunc("POST "+options.BaseURL+"/email/templates/{templateName}/fill", wrapper.FillTemplate)
	m.HandleFunc("GET "+options.BaseURL+"/email/templates/{templateName}/placeholders", wrapper.GetTemplatePlaceholdersByName)
	m.HandleFunc("POST "+options.BaseURL+"/email/templates/{templateName}/send", wrapper.SendTemplatedEmail)
	m.HandleFunc("GET "+options.BaseURL+"/file/download/{fileName}", wrapper.DownloadFile)
	m.HandleFunc("POST "+options.BaseURL+"/file/upload", wrapper.UploadFile)
	m.HandleFunc("GET "+options.BaseURL+"/info/openapi.html", wrapper.GetOpenAPIHTML)
	m.HandleFunc("GET "+options.BaseURL+"/info/openapi.json", wrapper.GetOpenAPIJSON)
	m.HandleFunc("GET "+options.BaseURL+"/info/status", wrapper.GetStatus)
	m.HandleFunc("GET "+options.BaseURL+"/info/version", wrapper.GetVersion)
	m.HandleFunc("GET "+options.BaseURL+"/pdf/templates/{templateName}", wrapper.GetPDFTemplateByName)
	m.HandleFunc("POST "+options.BaseURL+"/pdf/templates/{templateName}", wrapper.AddNewPDFTemplate)
	m.HandleFunc("POST "+options.BaseURL+"/pdf/templates/{templateName}/fill", wrapper.FillPDFTemplate)
	m.HandleFunc("GET "+options.BaseURL+"/pdf/templates/{templateName}/placeholders", wrapper.GetPDFTemplatePlaceholdersByName)
	m.HandleFunc("POST "+options.BaseURL+"/sms/basic/send", wrapper.SendBasicSMS)
	m.HandleFunc("POST "+options.BaseURL+"/sms/template/{templateName}/send", wrapper.SendTemplatedSMS)
	m.HandleFunc("GET "+options.BaseURL+"/sms/templates/{templateName}", wrapper.GetSMSTemplateByName)
	m.HandleFunc("POST "+options.BaseURL+"/sms/templates/{templateName}", wrapper.AddNewSMSTemplate)
	m.HandleFunc("POST "+options.BaseURL+"/sms/templates/{templateName}/fill", wrapper.FillSMSTemplate)
	m.HandleFunc("GET "+options.BaseURL+"/sms/templates/{templateName}/placeholders", wrapper.GetSMSTemplatePlaceholdersByName)
	m.HandleFunc("GET "+options.BaseURL+"/workflow/{workflowName}", wrapper.GetWorkflowByName)
	m.HandleFunc("POST "+options.BaseURL+"/workflow/{workflowName}", wrapper.CreateWorkflow)
	m.HandleFunc("POST "+options.BaseURL+"/workflow/{workflowName}/send", wrapper.UseWorkflow)

	return m
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"QsuUxxpmAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
