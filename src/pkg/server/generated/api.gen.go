//go:build go1.22

// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Send an Email with custom text
	// (POST /email/basic/send)
	SendEmail(w http.ResponseWriter, r *http.Request)
	// Get Template by Name
	// (GET /email/templates/{templateName})
	GetTemplateByName(w http.ResponseWriter, r *http.Request, templateName string)
	// Add new template
	// (POST /email/templates/{templateName})
	AddNewTemplate(w http.ResponseWriter, r *http.Request, templateName string)
	// Fill placeholders of template
	// (POST /email/templates/{templateName}/fill)
	FillTemplate(w http.ResponseWriter, r *http.Request, templateName string)
	// Get Template Placeholders
	// (GET /email/templates/{templateName}/placeholders)
	GetTemplatePlaceholdersByName(w http.ResponseWriter, r *http.Request, templateName string)
	// Send a templated Email
	// (POST /email/templates/{templateName}/send)
	SendTemplatedEmail(w http.ResponseWriter, r *http.Request, templateName string)
	// Get describing html of openapi spec
	// (GET /info/openapi.html)
	GetOpenAPIHTML(w http.ResponseWriter, r *http.Request)
	// Get openapi spec as json
	// (GET /info/openapi.json)
	GetOpenAPIJSON(w http.ResponseWriter, r *http.Request)
	// Get status of the service
	// (GET /info/status)
	GetStatus(w http.ResponseWriter, r *http.Request)
	// Get version info of the service
	// (GET /info/version)
	GetVersion(w http.ResponseWriter, r *http.Request)
	// Save a static PDF
	// (POST /pdf/basic)
	SavePDF(w http.ResponseWriter, r *http.Request)
	// Get PDF Template by Name
	// (GET /pdf/templates/{templateName})
	GetPDFTemplateByName(w http.ResponseWriter, r *http.Request, templateName string)
	// Add new PDF template
	// (POST /pdf/templates/{templateName})
	AddNewPDFTemplate(w http.ResponseWriter, r *http.Request, templateName string)
	// Fill placeholders of PDF template
	// (POST /pdf/templates/{templateName}/fill)
	FillPDFTemplate(w http.ResponseWriter, r *http.Request, templateName string)
	// Get PDF Template Placeholders
	// (GET /pdf/templates/{templateName}/placeholders)
	GetPDFTemplatePlaceholdersByName(w http.ResponseWriter, r *http.Request, templateName string)
	// Send a SMS with custom text
	// (POST /sms/basic/send)
	SendBasicSMS(w http.ResponseWriter, r *http.Request)
	// Send a templated SMS with custom text
	// (POST /sms/template/{templateName}/send)
	SendTemplatedSMS(w http.ResponseWriter, r *http.Request, templateName string)
	// Get SMS Template by Name
	// (GET /sms/templates/{templateName})
	GetSMSTemplateByName(w http.ResponseWriter, r *http.Request, templateName string)
	// Add new SMS template
	// (POST /sms/templates/{templateName})
	AddNewSMSTemplate(w http.ResponseWriter, r *http.Request, templateName string)
	// Fill placeholders of SMS template
	// (POST /sms/templates/{templateName}/fill)
	FillSMSTemplate(w http.ResponseWriter, r *http.Request, templateName string)
	// Get SMS Template Placeholders
	// (GET /sms/templates/{templateName}/placeholders)
	GetSMSTemplatePlaceholdersByName(w http.ResponseWriter, r *http.Request, templateName string)
	// Get Workflow by Name
	// (GET /workflow/{workflowName})
	GetWorkflowByName(w http.ResponseWriter, r *http.Request, workflowName string)
	// Create a new workflow
	// (POST /workflow/{workflowName})
	CreateWorkflow(w http.ResponseWriter, r *http.Request, workflowName string)
	// Use workflow
	// (POST /workflow/{workflowName}/send)
	UseWorkflow(w http.ResponseWriter, r *http.Request, workflowName string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// SendEmail operation middleware
func (siw *ServerInterfaceWrapper) SendEmail(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SendEmail(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetTemplateByName operation middleware
func (siw *ServerInterfaceWrapper) GetTemplateByName(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "templateName" -------------
	var templateName string

	err = runtime.BindStyledParameterWithOptions("simple", "templateName", r.PathValue("templateName"), &templateName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "templateName", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTemplateByName(w, r, templateName)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AddNewTemplate operation middleware
func (siw *ServerInterfaceWrapper) AddNewTemplate(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "templateName" -------------
	var templateName string

	err = runtime.BindStyledParameterWithOptions("simple", "templateName", r.PathValue("templateName"), &templateName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "templateName", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddNewTemplate(w, r, templateName)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// FillTemplate operation middleware
func (siw *ServerInterfaceWrapper) FillTemplate(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "templateName" -------------
	var templateName string

	err = runtime.BindStyledParameterWithOptions("simple", "templateName", r.PathValue("templateName"), &templateName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "templateName", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.FillTemplate(w, r, templateName)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetTemplatePlaceholdersByName operation middleware
func (siw *ServerInterfaceWrapper) GetTemplatePlaceholdersByName(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "templateName" -------------
	var templateName string

	err = runtime.BindStyledParameterWithOptions("simple", "templateName", r.PathValue("templateName"), &templateName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "templateName", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTemplatePlaceholdersByName(w, r, templateName)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// SendTemplatedEmail operation middleware
func (siw *ServerInterfaceWrapper) SendTemplatedEmail(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "templateName" -------------
	var templateName string

	err = runtime.BindStyledParameterWithOptions("simple", "templateName", r.PathValue("templateName"), &templateName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "templateName", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SendTemplatedEmail(w, r, templateName)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetOpenAPIHTML operation middleware
func (siw *ServerInterfaceWrapper) GetOpenAPIHTML(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetOpenAPIHTML(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetOpenAPIJSON operation middleware
func (siw *ServerInterfaceWrapper) GetOpenAPIJSON(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetOpenAPIJSON(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetStatus operation middleware
func (siw *ServerInterfaceWrapper) GetStatus(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetStatus(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetVersion operation middleware
func (siw *ServerInterfaceWrapper) GetVersion(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetVersion(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// SavePDF operation middleware
func (siw *ServerInterfaceWrapper) SavePDF(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SavePDF(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetPDFTemplateByName operation middleware
func (siw *ServerInterfaceWrapper) GetPDFTemplateByName(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "templateName" -------------
	var templateName string

	err = runtime.BindStyledParameterWithOptions("simple", "templateName", r.PathValue("templateName"), &templateName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "templateName", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPDFTemplateByName(w, r, templateName)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AddNewPDFTemplate operation middleware
func (siw *ServerInterfaceWrapper) AddNewPDFTemplate(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "templateName" -------------
	var templateName string

	err = runtime.BindStyledParameterWithOptions("simple", "templateName", r.PathValue("templateName"), &templateName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "templateName", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddNewPDFTemplate(w, r, templateName)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// FillPDFTemplate operation middleware
func (siw *ServerInterfaceWrapper) FillPDFTemplate(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "templateName" -------------
	var templateName string

	err = runtime.BindStyledParameterWithOptions("simple", "templateName", r.PathValue("templateName"), &templateName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "templateName", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.FillPDFTemplate(w, r, templateName)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetPDFTemplatePlaceholdersByName operation middleware
func (siw *ServerInterfaceWrapper) GetPDFTemplatePlaceholdersByName(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "templateName" -------------
	var templateName string

	err = runtime.BindStyledParameterWithOptions("simple", "templateName", r.PathValue("templateName"), &templateName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "templateName", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPDFTemplatePlaceholdersByName(w, r, templateName)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// SendBasicSMS operation middleware
func (siw *ServerInterfaceWrapper) SendBasicSMS(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SendBasicSMS(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// SendTemplatedSMS operation middleware
func (siw *ServerInterfaceWrapper) SendTemplatedSMS(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "templateName" -------------
	var templateName string

	err = runtime.BindStyledParameterWithOptions("simple", "templateName", r.PathValue("templateName"), &templateName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "templateName", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SendTemplatedSMS(w, r, templateName)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetSMSTemplateByName operation middleware
func (siw *ServerInterfaceWrapper) GetSMSTemplateByName(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "templateName" -------------
	var templateName string

	err = runtime.BindStyledParameterWithOptions("simple", "templateName", r.PathValue("templateName"), &templateName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "templateName", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSMSTemplateByName(w, r, templateName)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AddNewSMSTemplate operation middleware
func (siw *ServerInterfaceWrapper) AddNewSMSTemplate(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "templateName" -------------
	var templateName string

	err = runtime.BindStyledParameterWithOptions("simple", "templateName", r.PathValue("templateName"), &templateName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "templateName", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddNewSMSTemplate(w, r, templateName)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// FillSMSTemplate operation middleware
func (siw *ServerInterfaceWrapper) FillSMSTemplate(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "templateName" -------------
	var templateName string

	err = runtime.BindStyledParameterWithOptions("simple", "templateName", r.PathValue("templateName"), &templateName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "templateName", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.FillSMSTemplate(w, r, templateName)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetSMSTemplatePlaceholdersByName operation middleware
func (siw *ServerInterfaceWrapper) GetSMSTemplatePlaceholdersByName(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "templateName" -------------
	var templateName string

	err = runtime.BindStyledParameterWithOptions("simple", "templateName", r.PathValue("templateName"), &templateName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "templateName", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSMSTemplatePlaceholdersByName(w, r, templateName)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetWorkflowByName operation middleware
func (siw *ServerInterfaceWrapper) GetWorkflowByName(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "workflowName" -------------
	var workflowName string

	err = runtime.BindStyledParameterWithOptions("simple", "workflowName", r.PathValue("workflowName"), &workflowName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "workflowName", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetWorkflowByName(w, r, workflowName)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateWorkflow operation middleware
func (siw *ServerInterfaceWrapper) CreateWorkflow(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "workflowName" -------------
	var workflowName string

	err = runtime.BindStyledParameterWithOptions("simple", "workflowName", r.PathValue("workflowName"), &workflowName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "workflowName", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateWorkflow(w, r, workflowName)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UseWorkflow operation middleware
func (siw *ServerInterfaceWrapper) UseWorkflow(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "workflowName" -------------
	var workflowName string

	err = runtime.BindStyledParameterWithOptions("simple", "workflowName", r.PathValue("workflowName"), &workflowName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "workflowName", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UseWorkflow(w, r, workflowName)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       *http.ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m *http.ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m *http.ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("POST "+options.BaseURL+"/email/basic/send", wrapper.SendEmail)
	m.HandleFunc("GET "+options.BaseURL+"/email/templates/{templateName}", wrapper.GetTemplateByName)
	m.HandleFunc("POST "+options.BaseURL+"/email/templates/{templateName}", wrapper.AddNewTemplate)
	m.HandleFunc("POST "+options.BaseURL+"/email/templates/{templateName}/fill", wrapper.FillTemplate)
	m.HandleFunc("GET "+options.BaseURL+"/email/templates/{templateName}/placeholders", wrapper.GetTemplatePlaceholdersByName)
	m.HandleFunc("POST "+options.BaseURL+"/email/templates/{templateName}/send", wrapper.SendTemplatedEmail)
	m.HandleFunc("GET "+options.BaseURL+"/info/openapi.html", wrapper.GetOpenAPIHTML)
	m.HandleFunc("GET "+options.BaseURL+"/info/openapi.json", wrapper.GetOpenAPIJSON)
	m.HandleFunc("GET "+options.BaseURL+"/info/status", wrapper.GetStatus)
	m.HandleFunc("GET "+options.BaseURL+"/info/version", wrapper.GetVersion)
	m.HandleFunc("POST "+options.BaseURL+"/pdf/basic", wrapper.SavePDF)
	m.HandleFunc("GET "+options.BaseURL+"/pdf/templates/{templateName}", wrapper.GetPDFTemplateByName)
	m.HandleFunc("POST "+options.BaseURL+"/pdf/templates/{templateName}", wrapper.AddNewPDFTemplate)
	m.HandleFunc("POST "+options.BaseURL+"/pdf/templates/{templateName}/fill", wrapper.FillPDFTemplate)
	m.HandleFunc("GET "+options.BaseURL+"/pdf/templates/{templateName}/placeholders", wrapper.GetPDFTemplatePlaceholdersByName)
	m.HandleFunc("POST "+options.BaseURL+"/sms/basic/send", wrapper.SendBasicSMS)
	m.HandleFunc("POST "+options.BaseURL+"/sms/template/{templateName}/send", wrapper.SendTemplatedSMS)
	m.HandleFunc("GET "+options.BaseURL+"/sms/templates/{templateName}", wrapper.GetSMSTemplateByName)
	m.HandleFunc("POST "+options.BaseURL+"/sms/templates/{templateName}", wrapper.AddNewSMSTemplate)
	m.HandleFunc("POST "+options.BaseURL+"/sms/templates/{templateName}/fill", wrapper.FillSMSTemplate)
	m.HandleFunc("GET "+options.BaseURL+"/sms/templates/{templateName}/placeholders", wrapper.GetSMSTemplatePlaceholdersByName)
	m.HandleFunc("GET "+options.BaseURL+"/workflow/{workflowName}", wrapper.GetWorkflowByName)
	m.HandleFunc("POST "+options.BaseURL+"/workflow/{workflowName}", wrapper.CreateWorkflow)
	m.HandleFunc("POST "+options.BaseURL+"/workflow/{workflowName}/send", wrapper.UseWorkflow)

	return m
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"aAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
