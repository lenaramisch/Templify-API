//go:build go1.22

// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Send an Email with custom text
	// (POST /email/basic/send)
	SendEmail(w http.ResponseWriter, r *http.Request)
	// Get Template by Name
	// (GET /email/templates/{templateName})
	GetTemplateByName(w http.ResponseWriter, r *http.Request, templateName string)
	// Add new template
	// (POST /email/templates/{templateName})
	AddNewTemplate(w http.ResponseWriter, r *http.Request, templateName string)
	// Fill placeholders of template
	// (POST /email/templates/{templateName}/fill)
	FillTemplate(w http.ResponseWriter, r *http.Request, templateName string)
	// Get Template Placeholders
	// (GET /email/templates/{templateName}/placeholders)
	GetTemplatePlaceholdersByName(w http.ResponseWriter, r *http.Request, templateName string)
	// Send a templated Email
	// (POST /email/templates/{templateName}/send)
	SendTemplatedEmail(w http.ResponseWriter, r *http.Request, templateName string)
	// Get describing html of openapi spec
	// (GET /info/openapi.html)
	GetOpenAPIHTML(w http.ResponseWriter, r *http.Request)
	// Get openapi spec as json
	// (GET /info/openapi.json)
	GetOpenAPIJSON(w http.ResponseWriter, r *http.Request)
	// Get status of the service
	// (GET /info/status)
	GetStatus(w http.ResponseWriter, r *http.Request)
	// Get version info of the service
	// (GET /info/version)
	GetVersion(w http.ResponseWriter, r *http.Request)
	// Save a static PDF
	// (POST /pdf/basic)
	SavePDF(w http.ResponseWriter, r *http.Request)
	// Get PDF Template by Name
	// (GET /pdf/templates/{templateName})
	GetPDFTemplateByName(w http.ResponseWriter, r *http.Request, templateName string)
	// Add new PDF template
	// (POST /pdf/templates/{templateName})
	AddNewPDFTemplate(w http.ResponseWriter, r *http.Request, templateName string)
	// Fill placeholders of PDF template
	// (POST /pdf/templates/{templateName}/fill)
	FillPDFTemplate(w http.ResponseWriter, r *http.Request, templateName string)
	// Get PDF Template Placeholders
	// (GET /pdf/templates/{templateName}/placeholders)
	GetPDFTemplatePlaceholdersByName(w http.ResponseWriter, r *http.Request, templateName string)
	// Send a SMS with custom text
	// (POST /sms/basic/send)
	SendBasicSMS(w http.ResponseWriter, r *http.Request)
	// Send a templated SMS with custom text
	// (POST /sms/template/{templateName}/send)
	SendTemplatedSMS(w http.ResponseWriter, r *http.Request, templateName string)
	// Get SMS Template by Name
	// (GET /sms/templates/{templateName})
	GetSMSTemplateByName(w http.ResponseWriter, r *http.Request, templateName string)
	// Add new SMS template
	// (POST /sms/templates/{templateName})
	AddNewSMSTemplate(w http.ResponseWriter, r *http.Request, templateName string)
	// Fill placeholders of SMS template
	// (POST /sms/templates/{templateName}/fill)
	FillSMSTemplate(w http.ResponseWriter, r *http.Request, templateName string)
	// Get SMS Template Placeholders
	// (GET /sms/templates/{templateName}/placeholders)
	GetSMSTemplatePlaceholdersByName(w http.ResponseWriter, r *http.Request, templateName string)
	// Get Workflow by Name
	// (GET /workflow/{workflowName})
	GetWorkflowByName(w http.ResponseWriter, r *http.Request, workflowName string)
	// Create a new workflow
	// (POST /workflow/{workflowName})
	CreateWorkflow(w http.ResponseWriter, r *http.Request, workflowName string)
	// Use workflow
	// (POST /workflow/{workflowName}/send)
	UseWorkflow(w http.ResponseWriter, r *http.Request, workflowName string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// SendEmail operation middleware
func (siw *ServerInterfaceWrapper) SendEmail(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SendEmail(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetTemplateByName operation middleware
func (siw *ServerInterfaceWrapper) GetTemplateByName(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "templateName" -------------
	var templateName string

	err = runtime.BindStyledParameterWithOptions("simple", "templateName", r.PathValue("templateName"), &templateName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "templateName", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTemplateByName(w, r, templateName)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AddNewTemplate operation middleware
func (siw *ServerInterfaceWrapper) AddNewTemplate(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "templateName" -------------
	var templateName string

	err = runtime.BindStyledParameterWithOptions("simple", "templateName", r.PathValue("templateName"), &templateName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "templateName", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddNewTemplate(w, r, templateName)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// FillTemplate operation middleware
func (siw *ServerInterfaceWrapper) FillTemplate(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "templateName" -------------
	var templateName string

	err = runtime.BindStyledParameterWithOptions("simple", "templateName", r.PathValue("templateName"), &templateName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "templateName", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.FillTemplate(w, r, templateName)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetTemplatePlaceholdersByName operation middleware
func (siw *ServerInterfaceWrapper) GetTemplatePlaceholdersByName(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "templateName" -------------
	var templateName string

	err = runtime.BindStyledParameterWithOptions("simple", "templateName", r.PathValue("templateName"), &templateName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "templateName", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTemplatePlaceholdersByName(w, r, templateName)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// SendTemplatedEmail operation middleware
func (siw *ServerInterfaceWrapper) SendTemplatedEmail(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "templateName" -------------
	var templateName string

	err = runtime.BindStyledParameterWithOptions("simple", "templateName", r.PathValue("templateName"), &templateName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "templateName", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SendTemplatedEmail(w, r, templateName)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetOpenAPIHTML operation middleware
func (siw *ServerInterfaceWrapper) GetOpenAPIHTML(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetOpenAPIHTML(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetOpenAPIJSON operation middleware
func (siw *ServerInterfaceWrapper) GetOpenAPIJSON(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetOpenAPIJSON(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetStatus operation middleware
func (siw *ServerInterfaceWrapper) GetStatus(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetStatus(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetVersion operation middleware
func (siw *ServerInterfaceWrapper) GetVersion(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetVersion(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// SavePDF operation middleware
func (siw *ServerInterfaceWrapper) SavePDF(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SavePDF(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetPDFTemplateByName operation middleware
func (siw *ServerInterfaceWrapper) GetPDFTemplateByName(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "templateName" -------------
	var templateName string

	err = runtime.BindStyledParameterWithOptions("simple", "templateName", r.PathValue("templateName"), &templateName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "templateName", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPDFTemplateByName(w, r, templateName)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AddNewPDFTemplate operation middleware
func (siw *ServerInterfaceWrapper) AddNewPDFTemplate(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "templateName" -------------
	var templateName string

	err = runtime.BindStyledParameterWithOptions("simple", "templateName", r.PathValue("templateName"), &templateName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "templateName", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddNewPDFTemplate(w, r, templateName)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// FillPDFTemplate operation middleware
func (siw *ServerInterfaceWrapper) FillPDFTemplate(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "templateName" -------------
	var templateName string

	err = runtime.BindStyledParameterWithOptions("simple", "templateName", r.PathValue("templateName"), &templateName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "templateName", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.FillPDFTemplate(w, r, templateName)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetPDFTemplatePlaceholdersByName operation middleware
func (siw *ServerInterfaceWrapper) GetPDFTemplatePlaceholdersByName(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "templateName" -------------
	var templateName string

	err = runtime.BindStyledParameterWithOptions("simple", "templateName", r.PathValue("templateName"), &templateName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "templateName", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPDFTemplatePlaceholdersByName(w, r, templateName)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// SendBasicSMS operation middleware
func (siw *ServerInterfaceWrapper) SendBasicSMS(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SendBasicSMS(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// SendTemplatedSMS operation middleware
func (siw *ServerInterfaceWrapper) SendTemplatedSMS(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "templateName" -------------
	var templateName string

	err = runtime.BindStyledParameterWithOptions("simple", "templateName", r.PathValue("templateName"), &templateName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "templateName", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SendTemplatedSMS(w, r, templateName)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetSMSTemplateByName operation middleware
func (siw *ServerInterfaceWrapper) GetSMSTemplateByName(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "templateName" -------------
	var templateName string

	err = runtime.BindStyledParameterWithOptions("simple", "templateName", r.PathValue("templateName"), &templateName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "templateName", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSMSTemplateByName(w, r, templateName)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AddNewSMSTemplate operation middleware
func (siw *ServerInterfaceWrapper) AddNewSMSTemplate(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "templateName" -------------
	var templateName string

	err = runtime.BindStyledParameterWithOptions("simple", "templateName", r.PathValue("templateName"), &templateName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "templateName", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddNewSMSTemplate(w, r, templateName)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// FillSMSTemplate operation middleware
func (siw *ServerInterfaceWrapper) FillSMSTemplate(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "templateName" -------------
	var templateName string

	err = runtime.BindStyledParameterWithOptions("simple", "templateName", r.PathValue("templateName"), &templateName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "templateName", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.FillSMSTemplate(w, r, templateName)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetSMSTemplatePlaceholdersByName operation middleware
func (siw *ServerInterfaceWrapper) GetSMSTemplatePlaceholdersByName(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "templateName" -------------
	var templateName string

	err = runtime.BindStyledParameterWithOptions("simple", "templateName", r.PathValue("templateName"), &templateName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "templateName", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSMSTemplatePlaceholdersByName(w, r, templateName)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetWorkflowByName operation middleware
func (siw *ServerInterfaceWrapper) GetWorkflowByName(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "workflowName" -------------
	var workflowName string

	err = runtime.BindStyledParameterWithOptions("simple", "workflowName", r.PathValue("workflowName"), &workflowName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "workflowName", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetWorkflowByName(w, r, workflowName)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateWorkflow operation middleware
func (siw *ServerInterfaceWrapper) CreateWorkflow(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "workflowName" -------------
	var workflowName string

	err = runtime.BindStyledParameterWithOptions("simple", "workflowName", r.PathValue("workflowName"), &workflowName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "workflowName", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateWorkflow(w, r, workflowName)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UseWorkflow operation middleware
func (siw *ServerInterfaceWrapper) UseWorkflow(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "workflowName" -------------
	var workflowName string

	err = runtime.BindStyledParameterWithOptions("simple", "workflowName", r.PathValue("workflowName"), &workflowName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "workflowName", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UseWorkflow(w, r, workflowName)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       *http.ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m *http.ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m *http.ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("POST "+options.BaseURL+"/email/basic/send", wrapper.SendEmail)
	m.HandleFunc("GET "+options.BaseURL+"/email/templates/{templateName}", wrapper.GetTemplateByName)
	m.HandleFunc("POST "+options.BaseURL+"/email/templates/{templateName}", wrapper.AddNewTemplate)
	m.HandleFunc("POST "+options.BaseURL+"/email/templates/{templateName}/fill", wrapper.FillTemplate)
	m.HandleFunc("GET "+options.BaseURL+"/email/templates/{templateName}/placeholders", wrapper.GetTemplatePlaceholdersByName)
	m.HandleFunc("POST "+options.BaseURL+"/email/templates/{templateName}/send", wrapper.SendTemplatedEmail)
	m.HandleFunc("GET "+options.BaseURL+"/info/openapi.html", wrapper.GetOpenAPIHTML)
	m.HandleFunc("GET "+options.BaseURL+"/info/openapi.json", wrapper.GetOpenAPIJSON)
	m.HandleFunc("GET "+options.BaseURL+"/info/status", wrapper.GetStatus)
	m.HandleFunc("GET "+options.BaseURL+"/info/version", wrapper.GetVersion)
	m.HandleFunc("POST "+options.BaseURL+"/pdf/basic", wrapper.SavePDF)
	m.HandleFunc("GET "+options.BaseURL+"/pdf/templates/{templateName}", wrapper.GetPDFTemplateByName)
	m.HandleFunc("POST "+options.BaseURL+"/pdf/templates/{templateName}", wrapper.AddNewPDFTemplate)
	m.HandleFunc("POST "+options.BaseURL+"/pdf/templates/{templateName}/fill", wrapper.FillPDFTemplate)
	m.HandleFunc("GET "+options.BaseURL+"/pdf/templates/{templateName}/placeholders", wrapper.GetPDFTemplatePlaceholdersByName)
	m.HandleFunc("POST "+options.BaseURL+"/sms/basic/send", wrapper.SendBasicSMS)
	m.HandleFunc("POST "+options.BaseURL+"/sms/template/{templateName}/send", wrapper.SendTemplatedSMS)
	m.HandleFunc("GET "+options.BaseURL+"/sms/templates/{templateName}", wrapper.GetSMSTemplateByName)
	m.HandleFunc("POST "+options.BaseURL+"/sms/templates/{templateName}", wrapper.AddNewSMSTemplate)
	m.HandleFunc("POST "+options.BaseURL+"/sms/templates/{templateName}/fill", wrapper.FillSMSTemplate)
	m.HandleFunc("GET "+options.BaseURL+"/sms/templates/{templateName}/placeholders", wrapper.GetSMSTemplatePlaceholdersByName)
	m.HandleFunc("GET "+options.BaseURL+"/workflow/{workflowName}", wrapper.GetWorkflowByName)
	m.HandleFunc("POST "+options.BaseURL+"/workflow/{workflowName}", wrapper.CreateWorkflow)
	m.HandleFunc("POST "+options.BaseURL+"/workflow/{workflowName}/send", wrapper.UseWorkflow)

	return m
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
