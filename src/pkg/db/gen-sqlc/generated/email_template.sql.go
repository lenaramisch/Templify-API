// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: email_template.sql

package repo_sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addEmailTemplate = `-- name: AddEmailTemplate :one
INSERT INTO emailtemplates (
    name, templ_string, is_mjml
) VALUES (
    $1, $2, $3
)
RETURNING id, name, templ_string, is_mjml, created_at
`

type AddEmailTemplateParams struct {
	Name        pgtype.Text
	TemplString pgtype.Text
	IsMjml      pgtype.Bool
}

func (q *Queries) AddEmailTemplate(ctx context.Context, arg AddEmailTemplateParams) (Emailtemplate, error) {
	row := q.db.QueryRow(ctx, addEmailTemplate, arg.Name, arg.TemplString, arg.IsMjml)
	var i Emailtemplate
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.TemplString,
		&i.IsMjml,
		&i.CreatedAt,
	)
	return i, err
}

const getEmailTemplateByName = `-- name: GetEmailTemplateByName :one
SELECT id, name, templ_string, is_mjml, created_at FROM emailtemplates
WHERE name = $1 LIMIT 1
`

func (q *Queries) GetEmailTemplateByName(ctx context.Context, name pgtype.Text) (Emailtemplate, error) {
	row := q.db.QueryRow(ctx, getEmailTemplateByName, name)
	var i Emailtemplate
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.TemplString,
		&i.IsMjml,
		&i.CreatedAt,
	)
	return i, err
}
