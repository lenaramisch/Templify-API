{
  "openapi": "3.0.3",
  "info": {
    "title": "SMS Service API",
    "version": "1.0.0",
    "license": {
      "name": "unlicensed",
      "url": "www.example.com"
    },
    "contact": {
      "name": "API Support",
      "email": "support@example.com",
      "url": "http://example.com"
    }
  },
  "servers": [
    {
      "url": "/",
      "description": "This server"
    }
  ],
  "tags": [
    {
      "name": "SMS",
      "description": "Everything for the SMS sending service"
    },
    {
      "name": "Email",
      "description": "Everything for the Email sending service"
    },
    {
      "name": "Placeholders",
      "description": "Everything to get the placeholders of a template and fill them with data"
    },
    {
      "name": "Template",
      "description": "Everything to save new email templates or receive existing ones"
    },
    {
      "name": "SMSPlaceholders",
      "description": "Everything to get the placeholders of a template and fill them with data"
    },
    {
      "name": "SMSTemplate",
      "description": "Everything to save new SMS templates or receive existing ones"
    },
    {
      "name": "PDFPlaceholders",
      "description": "Everything to get the placeholders of a PDF template and fill them with data"
    },
    {
      "name": "PDFTemplate",
      "description": "Everything to save new PDF templates or receive existing ones"
    }
  ],
  "paths": {
    "/info/version": {
      "get": {
        "tags": [
          "APIInfo"
        ],
        "summary": "Get version info of the service",
        "description": "Retrieve the version info of the service",
        "operationId": "getVersion",
        "responses": {
          "200": {
            "description": "The version of the service",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Version"
                },
                "example": {
                  "version": "1.0.0",
                  "buildDate": "2020-01-01",
                  "details": "This is an API.",
                  "commitHash": "0d1444adb917eacc71321f1281904f71c5e378ca",
                  "commitDate": "2020-01-01T00:00:00Z"
                }
              }
            }
          },
          "400": {
            "description": "You somehow managed to mess up the version request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "errorId": "123e4567-e89b-12d3-a456-426614174000",
                  "error": "The item does not exist",
                  "ErrorType": "Not Found",
                  "code": 404,
                  "timestamp": "2020-01-01T00:00:00Z"
                }
              }
            }
          }
        },
        "security": []
      }
    },
    "/info/status": {
      "get": {
        "tags": [
          "APIInfo"
        ],
        "summary": "Get status of the service",
        "description": "Retrieve the status of the service",
        "operationId": "getStatus",
        "responses": {
          "200": {
            "description": "The status of the service",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          },
          "400": {
            "description": "You somehow managed to mess up the status request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "errorId": "123e4567-e89b-12d3-a456-426614174000",
                  "error": "The item does not exist",
                  "ErrorType": "Not Found",
                  "code": 404,
                  "timestamp": "2020-01-01T00:00:00Z"
                }
              }
            }
          }
        },
        "security": []
      }
    },
    "/info/openapi.json": {
      "get": {
        "tags": [
          "APIInfo"
        ],
        "summary": "Get openapi spec as json",
        "description": "Retrieve the OpenAPI spec as JSON",
        "operationId": "getOpenAPIJSON",
        "responses": {
          "200": {
            "description": "The OpenAPI spec as JSON",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "example": {}
              }
            }
          },
          "400": {
            "description": "You somehow managed to mess up the oapi json request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "errorId": "123e4567-e89b-12d3-a456-426614174000",
                  "error": "The item does not exist",
                  "ErrorType": "Not Found",
                  "code": 404,
                  "timestamp": "2020-01-01T00:00:00Z"
                }
              }
            }
          }
        },
        "security": []
      }
    },
    "/info/openapi.html": {
      "get": {
        "tags": [
          "APIInfo"
        ],
        "summary": "Get describing html of openapi spec",
        "description": "Retrieve the OpenAPI spec as HTML",
        "operationId": "getOpenAPIHTML",
        "responses": {
          "200": {
            "description": "The rendered HTML for the OpenAPI spec",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string",
                  "example": "<html>...</html>"
                }
              }
            }
          },
          "400": {
            "description": "You somehow managed to mess up the oapi html request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "errorId": "123e4567-e89b-12d3-a456-426614174000",
                  "error": "The item does not exist",
                  "ErrorType": "Not Found",
                  "code": 404,
                  "timestamp": "2020-01-01T00:00:00Z"
                }
              }
            }
          }
        },
        "security": []
      }
    },
    "/sms": {
      "post": {
        "description": "Send a SMS with a custom message text by giving the recipients data as well as the message text",
        "summary": "Send a SMS with custom text",
        "operationId": "sendSMS",
        "tags": [
          "SMS"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SMSSendRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "SMS send"
          },
          "400": {
            "description": "Invalid receiver phone number supplied"
          }
        },
        "security": []
      }
    },
    "/sms/templates/{templateName}": {
      "get": {
        "description": "Get a specific SMS template by its name",
        "summary": "Get SMS Template by Name",
        "operationId": "getSMSTemplateByName",
        "tags": [
          "SMSTemplate"
        ],
        "parameters": [
          {
            "name": "templateName",
            "in": "path",
            "description": "Name of template to return",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "exampleTemplate"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SMSTemplate"
                }
              }
            }
          },
          "400": {
            "description": "Invalid name supplied"
          },
          "404": {
            "description": "Can not find template (template name)"
          }
        },
        "security": []
      },
      "post": {
        "description": "Add a new SMS template to the db",
        "summary": "Add new SMS template",
        "operationId": "addNewSMSTemplate",
        "tags": [
          "SMSTemplate"
        ],
        "parameters": [
          {
            "name": "templateName",
            "in": "path",
            "description": "Name of template to add",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "exampleTemplate"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SMSTemplatePostRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Added template (name)"
          },
          "400": {
            "description": "Invalid name supplied"
          }
        },
        "security": []
      }
    },
    "/sms/templates/{templateName}/placeholders": {
      "post": {
        "description": "Fill the placeholders of a specific SMS template. The boolean \"shouldBeSent\" is telling if the filled template should be sent as SMS",
        "summary": "Fill placeholders of SMS template",
        "operationId": "fillSMSTemplate",
        "tags": [
          "SMSPlaceholders"
        ],
        "parameters": [
          {
            "name": "templateName",
            "in": "path",
            "description": "Name of template to fill",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SMSTemplateFillRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SMSFilledTemplateResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid name or data supplied"
          }
        },
        "security": []
      },
      "get": {
        "description": "Get all placeholders of a specific SMS template that have to be filled with some data",
        "summary": "Get SMS Template Placeholders",
        "operationId": "getSMSTemplatePlaceholdersByName",
        "tags": [
          "SMSPlaceholders"
        ],
        "parameters": [
          {
            "name": "templateName",
            "in": "path",
            "description": "Name of SMS template to return",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SMSPlaceholders"
                }
              }
            }
          },
          "400": {
            "description": "Invalid name supplied"
          },
          "404": {
            "description": "Can not find template (template name)"
          }
        },
        "security": []
      }
    },
    "/email": {
      "post": {
        "description": "Send an Email without attachments or the use of templates by giving the recipients data as well as the message content",
        "summary": "Send an Email with custom text",
        "operationId": "sendEmail",
        "tags": [
          "Email"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmailSendRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Email sent"
          },
          "400": {
            "description": "Bad request"
          }
        },
        "security": []
      }
    },
    "/email/attachments": {
      "post": {
        "description": "Send an Email with some attached files by giving the recipients data as well as the file",
        "summary": "Send an Email with attachment",
        "operationId": "sendEmailWithAttachment",
        "tags": [
          "Email"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/EmailSendRequestAttachment"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Email send"
          },
          "400": {
            "description": "Bad request"
          }
        },
        "security": []
      }
    },
    "/email/templates/{templateName}": {
      "get": {
        "description": "Get a specific template by its name",
        "summary": "Get Template by Name",
        "operationId": "getTemplateByName",
        "tags": [
          "Template"
        ],
        "parameters": [
          {
            "name": "templateName",
            "in": "path",
            "description": "Name of template to return",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "exampleTemplate"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Template"
                }
              }
            }
          },
          "400": {
            "description": "Invalid name supplied"
          },
          "404": {
            "description": "Can not find template (template name)"
          }
        },
        "security": []
      },
      "post": {
        "description": "Add a new template to the db",
        "summary": "Add new template",
        "operationId": "addNewTemplate",
        "tags": [
          "Template"
        ],
        "parameters": [
          {
            "name": "templateName",
            "in": "path",
            "description": "Name of template to add",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "exampleTemplate"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TemplatePostRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Added template (name)"
          },
          "400": {
            "description": "Invalid name supplied"
          }
        },
        "security": []
      }
    },
    "/email/templates/{templateName}/placeholders": {
      "post": {
        "description": "Fill the placeholders of a specific template. The boolean \"shouldBeSent\" is telling if the filled template should be sent as email",
        "summary": "Fill placeholders of template",
        "operationId": "fillTemplate",
        "tags": [
          "Placeholders"
        ],
        "parameters": [
          {
            "name": "templateName",
            "in": "path",
            "description": "Name of template to fill",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TemplateFillRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/FilledTemplateResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid name or data supplied"
          }
        },
        "security": []
      },
      "get": {
        "description": "Get all placeholders of a specific template that have to be filled with some data",
        "summary": "Get Template Placeholders",
        "operationId": "getTemplatePlaceholdersByName",
        "tags": [
          "Placeholders"
        ],
        "parameters": [
          {
            "name": "templateName",
            "in": "path",
            "description": "Name of template to return",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Placeholders"
                }
              }
            }
          },
          "400": {
            "description": "Invalid name supplied"
          },
          "404": {
            "description": "Can not find template (template name)"
          }
        },
        "security": []
      }
    },
    "/email/templates/{templateName}/placeholders/attachments": {
      "post": {
        "description": "Send an email with some attached files and the use of a template by giving the recipients data as well as values to fill the templates placeholders and the file",
        "summary": "Send a templated Email with attachment",
        "operationId": "sendMJMLEmailWithAttachment",
        "tags": [
          "Placeholders"
        ],
        "parameters": [
          {
            "name": "templateName",
            "in": "path",
            "description": "Name of template to fill",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/MJMLSendRequestAttachment"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Email send"
          },
          "400": {
            "description": "Bad request"
          }
        },
        "security": []
      }
    },
    "/pdf/templates/{templateName}": {
      "get": {
        "description": "Get a specific PDF template by its name",
        "summary": "Get PDF Template by Name",
        "operationId": "getPDFTemplateByName",
        "tags": [
          "PDFTemplate"
        ],
        "parameters": [
          {
            "name": "templateName",
            "in": "path",
            "description": "Name of template to return",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "exampleTemplate"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PDFTemplate"
                }
              }
            }
          },
          "400": {
            "description": "Invalid name supplied"
          },
          "404": {
            "description": "Can not find template (template name)"
          }
        },
        "security": []
      },
      "post": {
        "description": "Add a new PDF template to the db",
        "summary": "Add new PDF template",
        "operationId": "addNewPDFTemplate",
        "tags": [
          "PDFTemplate"
        ],
        "parameters": [
          {
            "name": "templateName",
            "in": "path",
            "description": "Name of template to add",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "exampleTemplate"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PDFTemplatePostRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Added template (name)"
          },
          "400": {
            "description": "Invalid name supplied"
          }
        },
        "security": []
      }
    },
    "/pdf/templates/{templateName}/placeholders": {
      "post": {
        "description": "Fill the placeholders of a specific PDF template",
        "summary": "Fill placeholders of PDF template",
        "operationId": "fillPDFTemplate",
        "tags": [
          "PDFPlaceholders"
        ],
        "parameters": [
          {
            "name": "templateName",
            "in": "path",
            "description": "Name of template to fill",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PDFTemplateFillRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PDFFilledTemplateResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid name or data supplied"
          }
        },
        "security": []
      },
      "get": {
        "description": "Get all placeholders of a specific PDF template that have to be filled with some data",
        "summary": "Get PDF Template Placeholders",
        "operationId": "getPDFTemplatePlaceholdersByName",
        "tags": [
          "PDFPlaceholders"
        ],
        "parameters": [
          {
            "name": "templateName",
            "in": "path",
            "description": "Name of template to return",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PDFPlaceholders"
                }
              }
            }
          },
          "400": {
            "description": "Invalid name supplied"
          },
          "404": {
            "description": "Can not find template (template name)"
          }
        },
        "security": []
      }
    }
  },
  "components": {
    "schemas": {
      "Version": {
        "type": "object",
        "description": "This object holds the API version data.",
        "properties": {
          "version": {
            "type": "string",
            "description": "The version of the API",
            "example": "1.0.0"
          },
          "buildDate": {
            "type": "string",
            "description": "The date the code was built",
            "example": "2020-01-01"
          },
          "details": {
            "type": "string",
            "description": "A description of the API",
            "example": "This is the API for the x service"
          },
          "commitHash": {
            "type": "string",
            "description": "The hash of the commit",
            "example": "0d1444adb917eacc71321f1281904f71c5e378ca"
          },
          "commitDate": {
            "type": "string",
            "description": "The date of the commit",
            "example": "2020-01-01T00:00:00Z"
          }
        },
        "example": {
          "version": "1.0.0",
          "buildDate": "2020-01-01",
          "details": "This is an API.",
          "commitHash": "0d1444adb917eacc71321f1281904f71c5e378ca",
          "commitDate": "2020-01-01T00:00:00Z"
        },
        "required": [
          "version",
          "buildDate",
          "details",
          "commitHash",
          "commitDate"
        ]
      },
      "ErrorType": {
        "type": "string",
        "description": "The error type",
        "enum": [
          "Bad Request",
          "Not Found",
          "Not Implemented",
          "Internal Server Error"
        ],
        "example": "Bad Request"
      },
      "Error": {
        "type": "object",
        "description": "This object holds the error response data.",
        "properties": {
          "errorId": {
            "type": "string",
            "description": "The unique identifier for the error",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "error": {
            "type": "string",
            "description": "The error message",
            "example": "The item does not exist"
          },
          "ErrorType": {
            "$ref": "#/components/schemas/ErrorType"
          },
          "code": {
            "type": "integer",
            "description": "The error code",
            "example": 404
          },
          "timestamp": {
            "type": "string",
            "format": "rfc3339",
            "description": "The time the error occurred",
            "example": "2020-01-01T12:00:00Z"
          }
        },
        "example": {
          "errorId": "123e4567-e89b-12d3-a456-426614174000",
          "error": "The item does not exist",
          "ErrorType": "Not Found",
          "code": 404,
          "timestamp": "2020-01-01T00:00:00Z"
        },
        "required": [
          "errorId",
          "error",
          "ErrorType",
          "code",
          "timestamp"
        ]
      },
      "Status": {
        "type": "string",
        "description": "The status of the API",
        "enum": [
          "HEALTHY",
          "UNHEALTHY",
          "UNKNOWN"
        ],
        "example": "HEALTHY"
      },
      "SMSSendRequest": {
        "type": "object",
        "properties": {
          "receiverPhoneNumber": {
            "type": "string",
            "example": "+49123456789"
          },
          "message": {
            "type": "string",
            "example": "Don't forget to buy some milk!"
          }
        },
        "required": [
          "receiverPhoneNumber",
          "message"
        ]
      },
      "SMSTemplate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "ExampleName"
          },
          "templateString": {
            "type": "string",
            "example": "Hello {{.Name}}. You are {{.Age}} years old."
          }
        },
        "required": [
          "name",
          "templateString"
        ]
      },
      "SMSTemplatePostRequest": {
        "type": "object",
        "properties": {
          "templateString": {
            "type": "string",
            "example": "Hello {{.Name}}. You are {{.Age}} years old."
          }
        },
        "required": [
          "templateString"
        ]
      },
      "SMSPlaceholders": {
        "type": "object",
        "properties": {
          "placeholders": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "key",
                      "value"
                    ],
                    "properties": {
                      "key": {
                        "type": "string"
                      },
                      "value": {
                        "type": "string"
                      }
                    },
                    "example": [
                      {
                        "key": "firstName",
                        "value": ""
                      },
                      {
                        "key": "lastName",
                        "value": ""
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "required": [
          "placeholders"
        ],
        "example": {
          "placeholders": [
            {
              "data": [
                {
                  "key": "firstName",
                  "value": ""
                },
                {
                  "key": "lastName",
                  "value": ""
                }
              ]
            }
          ]
        }
      },
      "SMSTemplateFillRequest": {
        "type": "object",
        "properties": {
          "shouldBeSent": {
            "type": "boolean",
            "example": true
          },
          "receiverPhoneNumber": {
            "type": "string",
            "example": "+49123456789"
          },
          "placeholders": {
            "type": "object",
            "properties": {
              "FirstName": {
                "type": "string",
                "example": "Sherlock"
              },
              "LastName": {
                "type": "string",
                "example": "Holmes"
              },
              "Age": {
                "type": "string",
                "example": "45"
              }
            }
          }
        },
        "required": [
          "shouldBeSent",
          "receiverPhoneNumber",
          "placeholders"
        ]
      },
      "SMSFilledTemplateResponse": {
        "type": "string",
        "example": "Hello Sherlock Holmes, you are 45 years old."
      },
      "EmailSendRequest": {
        "type": "object",
        "properties": {
          "toEmail": {
            "type": "string",
            "example": "holmes@detective.com"
          },
          "toName": {
            "type": "string",
            "example": "Sherlock Holmes"
          },
          "subject": {
            "type": "string",
            "example": "New Case"
          },
          "message": {
            "type": "string",
            "example": "Find the thief!"
          }
        },
        "required": [
          "toEmail",
          "toName",
          "subject",
          "message"
        ]
      },
      "EmailSendRequestAttachment": {
        "type": "object",
        "properties": {
          "file": {
            "type": "string",
            "description": "The file that should be send as attachment"
          },
          "toEmail": {
            "type": "string",
            "example": "holmes@detective.com"
          },
          "toName": {
            "type": "string",
            "example": "Sherlock Holmes"
          },
          "subject": {
            "type": "string",
            "example": "New Case"
          },
          "message": {
            "type": "string",
            "example": "Find the thief!"
          }
        },
        "required": [
          "file",
          "toEmail",
          "toName",
          "subject",
          "message"
        ]
      },
      "Template": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "ExampleName"
          },
          "templateMJMLCode": {
            "type": "string",
            "example": "<mjml><mj-body><mj-section><mj-column><mj-text font-size=\"20px\" color=\"#F45E43\" font-family=\"helvetica\">Hello World</mj-text></mj-column></mj-section></mj-body></mjml>"
          }
        },
        "required": [
          "name",
          "templateMJMLCode"
        ]
      },
      "TemplatePostRequest": {
        "type": "object",
        "properties": {
          "templateMJMLCode": {
            "type": "string",
            "example": "<mjml><mj-body><mj-section><mj-column><mj-text font-size=\"20px\" color=\"#F45E43\" font-family=\"helvetica\">Hello World </mj-text></mj-column></mj-section></mj-body></mjml>"
          }
        },
        "required": [
          "templateMJMLCode"
        ]
      },
      "Placeholders": {
        "type": "object",
        "properties": {
          "placeholders": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "key",
                      "value"
                    ],
                    "properties": {
                      "key": {
                        "type": "string"
                      },
                      "value": {
                        "type": "string"
                      }
                    },
                    "example": [
                      {
                        "key": "firstName",
                        "value": ""
                      },
                      {
                        "key": "lastName",
                        "value": ""
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "required": [
          "placeholders"
        ],
        "example": {
          "placeholders": [
            {
              "data": [
                {
                  "key": "firstName",
                  "value": ""
                },
                {
                  "key": "lastName",
                  "value": ""
                }
              ]
            }
          ]
        }
      },
      "TemplateFillRequest": {
        "type": "object",
        "properties": {
          "shouldBeSent": {
            "type": "boolean",
            "example": true
          },
          "toEmail": {
            "type": "string",
            "example": "holmes.sherlock@example.com"
          },
          "toName": {
            "type": "string",
            "example": "Sherlock Holmes"
          },
          "subject": {
            "type": "string",
            "example": "TestSubject"
          },
          "placeholders": {
            "type": "object",
            "properties": {
              "FirstName": {
                "type": "string",
                "example": "Sherlock"
              },
              "LastName": {
                "type": "string",
                "example": "Holmes"
              },
              "Age": {
                "type": "string",
                "example": "45"
              }
            },
            "required": [
              "FirstName",
              "LastName",
              "Age"
            ]
          }
        },
        "required": [
          "shouldBeSent",
          "toEmail",
          "toName",
          "subject",
          "placeholders"
        ]
      },
      "FilledTemplateResponse": {
        "type": "string",
        "example": "<mjml><mj-body><mj-section><mj-column><mj-text font-size=\"20px\" color=\"#F45E43\" font-family=\"helvetica\">Hello World </mj-text></mj-column></mj-section></mj-body></mjml>"
      },
      "MJMLSendRequestAttachment": {
        "type": "object",
        "properties": {
          "file": {
            "type": "string",
            "description": "The file that should be send as attachment"
          },
          "toEmail": {
            "type": "string",
            "example": "holmes@detective.com"
          },
          "toName": {
            "type": "string",
            "example": "Sherlock Holmes"
          },
          "subject": {
            "type": "string",
            "example": "New Case"
          },
          "PlaceHolder": {
            "type": "string",
            "description": "Each placeholder key-value pair should be in its own form field",
            "example": "placeholder value"
          },
          "shouldBeSent": {
            "type": "string",
            "description": "Determines if the email will be sent (true/false)",
            "example": true
          }
        },
        "required": [
          "file",
          "toEmail",
          "toName",
          "subject",
          "message",
          "PlaceHolder",
          "shouldBeSent"
        ]
      },
      "PDFTemplate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "ExampleName"
          },
          "templateString": {
            "type": "string",
            "example": "iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAQAAAC1HAwCAAAAC0lEQVR42mNk+A8AAQUBAScY42YAAAAASUVORK5CYII="
          }
        },
        "required": [
          "name",
          "templateString"
        ]
      },
      "PDFTemplatePostRequest": {
        "type": "object",
        "properties": {
          "templateString": {
            "type": "string",
            "example": "iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAQAAAC1HAwCAAAAC0lEQVR42mNk+A8AAQUBAScY42YAAAAASUVORK5CYII="
          }
        },
        "required": [
          "templateString"
        ]
      },
      "PDFPlaceholders": {
        "type": "object",
        "properties": {
          "placeholders": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "key",
                      "value"
                    ],
                    "properties": {
                      "key": {
                        "type": "string"
                      },
                      "value": {
                        "type": "string"
                      }
                    },
                    "example": [
                      {
                        "key": "firstName",
                        "value": ""
                      },
                      {
                        "key": "lastName",
                        "value": ""
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "required": [
          "placeholders"
        ],
        "example": {
          "placeholders": [
            {
              "data": [
                {
                  "key": "firstName",
                  "value": ""
                },
                {
                  "key": "lastName",
                  "value": ""
                }
              ]
            }
          ]
        }
      },
      "PDFTemplateFillRequest": {
        "type": "object",
        "properties": {
          "placeholders": {
            "type": "object",
            "properties": {
              "FirstName": {
                "type": "string",
                "example": "Sherlock"
              },
              "LastName": {
                "type": "string",
                "example": "Holmes"
              },
              "Age": {
                "type": "string",
                "example": "45"
              }
            }
          }
        },
        "required": [
          "placeholders"
        ]
      },
      "PDFFilledTemplateResponse": {
        "type": "string",
        "example": "iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAQAAAC1HAwCAAAAC0lEQVR42mNk+A8AAQUBAScY42YAAAAASUVORK5CYII="
      }
    }
  }
}