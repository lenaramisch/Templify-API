// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: workflows.sql

package repo_sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addWorkflow = `-- name: AddWorkflow :one
INSERT INTO workflows (
    name, email_template_name, email_subject, static_attachments, templated_pdfs
) VALUES (
    $1, $2, $3, $4, $5
)
RETURNING id, name, email_template_name, email_subject, static_attachments, templated_pdfs, created_at
`

type AddWorkflowParams struct {
	Name              pgtype.Text
	EmailTemplateName pgtype.Text
	EmailSubject      pgtype.Text
	StaticAttachments pgtype.Text
	TemplatedPdfs     pgtype.Text
}

func (q *Queries) AddWorkflow(ctx context.Context, arg AddWorkflowParams) (Workflow, error) {
	row := q.db.QueryRow(ctx, addWorkflow,
		arg.Name,
		arg.EmailTemplateName,
		arg.EmailSubject,
		arg.StaticAttachments,
		arg.TemplatedPdfs,
	)
	var i Workflow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.EmailTemplateName,
		&i.EmailSubject,
		&i.StaticAttachments,
		&i.TemplatedPdfs,
		&i.CreatedAt,
	)
	return i, err
}

const getWorkflowByName = `-- name: GetWorkflowByName :one
SELECT id, name, email_template_name, email_subject, static_attachments, templated_pdfs, created_at FROM workflows
WHERE name = $1 LIMIT 1
`

func (q *Queries) GetWorkflowByName(ctx context.Context, name pgtype.Text) (Workflow, error) {
	row := q.db.QueryRow(ctx, getWorkflowByName, name)
	var i Workflow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.EmailTemplateName,
		&i.EmailSubject,
		&i.StaticAttachments,
		&i.TemplatedPdfs,
		&i.CreatedAt,
	)
	return i, err
}
