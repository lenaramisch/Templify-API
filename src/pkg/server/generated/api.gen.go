//go:build go1.22

// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.2.0 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Send an Email with custom text
	// (POST /email)
	SendEmail(w http.ResponseWriter, r *http.Request)
	// Send an Email with attachment
	// (POST /email/attachments)
	SendEmailWithAttachment(w http.ResponseWriter, r *http.Request)
	// Get Template by Name
	// (GET /email/templates/{templateName})
	GetTemplateByName(w http.ResponseWriter, r *http.Request, templateName string)
	// Add new template
	// (POST /email/templates/{templateName})
	AddNewTemplate(w http.ResponseWriter, r *http.Request, templateName string)
	// Get Template Placeholders
	// (GET /email/templates/{templateName}/placeholders)
	GetTemplatePlaceholdersByName(w http.ResponseWriter, r *http.Request, templateName string)
	// Fill placeholders of template
	// (POST /email/templates/{templateName}/placeholders)
	FillTemplate(w http.ResponseWriter, r *http.Request, templateName string)
	// Send a templated Email with attachment
	// (POST /email/templates/{templateName}/placeholders/attachments)
	SendMJMLEmailWithAttachment(w http.ResponseWriter, r *http.Request, templateName string)
	// Get describing html of openapi spec
	// (GET /info/openapi.html)
	GetOpenAPIHTML(w http.ResponseWriter, r *http.Request)
	// Get openapi spec as json
	// (GET /info/openapi.json)
	GetOpenAPIJSON(w http.ResponseWriter, r *http.Request)
	// Get status of the service
	// (GET /info/status)
	GetStatus(w http.ResponseWriter, r *http.Request)
	// Get version info of the service
	// (GET /info/version)
	GetVersion(w http.ResponseWriter, r *http.Request)
	// Send a SMS with custom text
	// (POST /sms)
	SendSMS(w http.ResponseWriter, r *http.Request)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// SendEmail operation middleware
func (siw *ServerInterfaceWrapper) SendEmail(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SendEmail(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// SendEmailWithAttachment operation middleware
func (siw *ServerInterfaceWrapper) SendEmailWithAttachment(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SendEmailWithAttachment(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetTemplateByName operation middleware
func (siw *ServerInterfaceWrapper) GetTemplateByName(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "templateName" -------------
	var templateName string

	err = runtime.BindStyledParameterWithOptions("simple", "templateName", r.PathValue("templateName"), &templateName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "templateName", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTemplateByName(w, r, templateName)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AddNewTemplate operation middleware
func (siw *ServerInterfaceWrapper) AddNewTemplate(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "templateName" -------------
	var templateName string

	err = runtime.BindStyledParameterWithOptions("simple", "templateName", r.PathValue("templateName"), &templateName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "templateName", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddNewTemplate(w, r, templateName)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetTemplatePlaceholdersByName operation middleware
func (siw *ServerInterfaceWrapper) GetTemplatePlaceholdersByName(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "templateName" -------------
	var templateName string

	err = runtime.BindStyledParameterWithOptions("simple", "templateName", r.PathValue("templateName"), &templateName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "templateName", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTemplatePlaceholdersByName(w, r, templateName)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// FillTemplate operation middleware
func (siw *ServerInterfaceWrapper) FillTemplate(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "templateName" -------------
	var templateName string

	err = runtime.BindStyledParameterWithOptions("simple", "templateName", r.PathValue("templateName"), &templateName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "templateName", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.FillTemplate(w, r, templateName)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// SendMJMLEmailWithAttachment operation middleware
func (siw *ServerInterfaceWrapper) SendMJMLEmailWithAttachment(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "templateName" -------------
	var templateName string

	err = runtime.BindStyledParameterWithOptions("simple", "templateName", r.PathValue("templateName"), &templateName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "templateName", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SendMJMLEmailWithAttachment(w, r, templateName)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetOpenAPIHTML operation middleware
func (siw *ServerInterfaceWrapper) GetOpenAPIHTML(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetOpenAPIHTML(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetOpenAPIJSON operation middleware
func (siw *ServerInterfaceWrapper) GetOpenAPIJSON(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetOpenAPIJSON(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetStatus operation middleware
func (siw *ServerInterfaceWrapper) GetStatus(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetStatus(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetVersion operation middleware
func (siw *ServerInterfaceWrapper) GetVersion(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetVersion(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// SendSMS operation middleware
func (siw *ServerInterfaceWrapper) SendSMS(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SendSMS(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       *http.ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m *http.ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m *http.ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("POST "+options.BaseURL+"/email", wrapper.SendEmail)
	m.HandleFunc("POST "+options.BaseURL+"/email/attachments", wrapper.SendEmailWithAttachment)
	m.HandleFunc("GET "+options.BaseURL+"/email/templates/{templateName}", wrapper.GetTemplateByName)
	m.HandleFunc("POST "+options.BaseURL+"/email/templates/{templateName}", wrapper.AddNewTemplate)
	m.HandleFunc("GET "+options.BaseURL+"/email/templates/{templateName}/placeholders", wrapper.GetTemplatePlaceholdersByName)
	m.HandleFunc("POST "+options.BaseURL+"/email/templates/{templateName}/placeholders", wrapper.FillTemplate)
	m.HandleFunc("POST "+options.BaseURL+"/email/templates/{templateName}/placeholders/attachments", wrapper.SendMJMLEmailWithAttachment)
	m.HandleFunc("GET "+options.BaseURL+"/info/openapi.html", wrapper.GetOpenAPIHTML)
	m.HandleFunc("GET "+options.BaseURL+"/info/openapi.json", wrapper.GetOpenAPIJSON)
	m.HandleFunc("GET "+options.BaseURL+"/info/status", wrapper.GetStatus)
	m.HandleFunc("GET "+options.BaseURL+"/info/version", wrapper.GetVersion)
	m.HandleFunc("POST "+options.BaseURL+"/sms", wrapper.SendSMS)

	return m
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xbe2/bOBL/KjzuAbeLc/yI3aY1sMC6u8kme0k2WOe22GvyBy2NI7aSqJKUU1/g737g",
	"QxIlU36k7V1zW6BAZfE1/M1vZjhD5QEHLMlYCqkUePyARRBBQvTjcUJoPIU0/A3e5yCkepdxlgGXFHSP",
	"BIQgd6Ae4QNJshjwGJ/QNEQyAiQjCvO/4A6Wy0w1CMlpeodXHSzy2VsIZH3cJdyjH4kA3wDJtDD1ARGL",
	"ExA/hCAhkHQB3YAl/sGXJGkIOY2Axyx4h071JOvDVh3M4X1OOYR4/KYUoJyt2kSnhOG2nIWZplVnDcSJ",
	"lCSIEkg9cM5prMUMQQScZpKyFI/xdQRItSAZEYlExPI4RDNAAtIQEYFINaNn838eFWn0Oh+hKc4Z98FP",
	"BTK9UMTiUGjgQHVGHETGUgEoJJJ0caeS/sFMd20WuWQSnbA8DXEHBywEPB71Rx0MZkWtYSohQSEDgVIm",
	"EXygQsmre5yFeIwHh0MYPXt+dAAvXs4OBofh8ICMnj0/GB0+fz4YDY5G/X5f7ZkmICRJMjzGh/3D/kF/",
	"cNAfXPf7Y/3vX2qjddI5cj7gv3KY4zH+plc5hZ71CL2q46rYhY+qBhnd7uCh92shp6mEO+BqGmjDvJin",
	"UJgz1Qa41nhV4udbIU/p+xwQDSGVdE6BoznjlXZra+4K/xqxK334RFDNDp9YEORc0dld2lHj4LBQYwfP",
	"GU+IxGPM58FwOHy51T4KLArUO47qrUJdeVtNpOBKm8qkmRDSPFHLviIhKgJIp2YJ6vlMbVL5Lr3ps1QC",
	"T0mMpsAXwJExyVsXjfp0a3if0DiG8BqSLCYSfrP2WXcsN3m/PwySt0msn6D4fTBj4bLxSii/xdLG24DF",
	"edJ8KeGDRHOWygNB/w3f3+DDfvbhBqOAxYx/f4O/ORk9Ox4Nb7DpNCcJjZff3+AI4gVIGpAbIxmcQhwz",
	"9JrxOERm9p6d3l2x55Wj55e559ldr0LAh+TFLxfnO8atq5gEcMriEDy2fEyCCGWqR6R7oHewPFiQOAeU",
	"EcqdgEZTRKVA7D5VhpigOYW4bgruNHoKn+CfI4qa/q9gavdfn/snkMATmoJAdG7MWYUgdE/j2K4h0beS",
	"59Cbk1jAd+6m1Os/Xfzt1DjTwNfnea4qzYt1AmaNVhUdPN1UlK41l5t984DfwRKP8ZxyIa3YhmFjjFed",
	"ojkmntbbZkjVfR/WUbZDHrYAqYYXnX1Y2BeEc7LUg7f3cKevgeWbf3ox3f/U/xNL/6bcH78DiSRDs3yJ",
	"BEsAJTR+5z1hcgiALoBfRSyFyzyZGe9RTfn30cvB4VBF3Rfbo5tvts3nvakkMhd+TyF0G2LGmidXZ05A",
	"Oz2enF+f/oE7+J+X7vM/Ln99fVkPVlXz2u6LELUOb7pmicfmyRJv3XjtVMpj/2jPZU8y2v2vgl2DSqnF",
	"uQmrj0SFGtW5o9Vgso3Oa9I0pdEz/8mm8ExeL+0bck58I3Z05yeOJzyv3N6kxZqaEdIf32aMxUDS1gB3",
	"DUJOy2ixT4zrCgvED7blc4a62ma3hLyt7rag0BUTspVC/zc2jr4QI9/Jun8HLnRQ2K0oMLk6QwszxFcR",
	"mOU0Dn/SPt9J6nTulSRUrrU4WXvR55SICI9xPxyMRiMSzl4OjoAEwdFgeDiYDw5fDF72R/OjQfAMhkcv",
	"AoI7OARJaCwKmalAJFWCKtkWxfbwoNvv9tdrA47EvigZEmmyV5U8onsikBogW7JXnzG6O29dwUZh07ct",
	"NXaxalnGgOdbJiIi2rDMHnCvLV3i31x3gpzfjZOGU+owOivYVRQoPiABfEED73lg0c5aKPnZsqAhwjbj",
	"KVboOAyptlrDu6bjdRtTM9N0zpSwAUslsRHBuHks8ixjXDZ8ujkhYQXI1HTAHZxzNSCSMhv3em7/VQfH",
	"NABbBrBj89S+C8uh9/f33cY4SaWJDxdTXZKgQYGYx3RYBinJKB7jYbffHSrXT2SkNd+DImxlTHgSyKlO",
	"QlN0bNNGGbFcOimpQFbvuTDmYJ2XQLMluqMLmt7pZg4BzageoPyPymvvIY7V/6rZnoaRAtpELmXsRAmh",
	"a4xKjCKScROJXrFwWejGRnaSZTEN9KjeW2F4ZmqEWyuIzQuFVZ1Y6qigX5iqjYbusN/31BQ0TiqtVsCP",
	"fF1ekRDxcpkOFhDknMolHr+5VeE5SQhfeqFHQS4kS5AKT8oSyJ1QnDfA3Kq5jDp7jn72Ua1Ji8xgCHVR",
	"Yk892ky7RXmvqYwmbjWjXZVJHkuaES57c8aTgyI/fpw2nTU/Wq/h59BrvcTTqtbSuHoPxaM61K2ULHfg",
	"UfHPIBFBIoOAzmlQGqfSKZUC2XSirq2fQRbnvldLe2bMCCcJSJ0kvGkuovq4pq9ybA4y52nNf9unMrtU",
	"3hWPtSeqHKe7LdxUVMdRfzMK3PqV+EmcQymyJk998yIPAhBinseohLGVIWfpgsQ01LgjFUBiCpZPo/Xe",
	"P5JUXyHM9ZVYAe635ZOa5buNTFPqv3Z0XqTplmDlvm7V8crrIyZhiAhK4b6mXWXp4WyNOZMwvIR7R8F7",
	"04aE4X+bM58+lviypp3czsCLP7jKtzrfj18bGKL062rXz47tHqjXLCS0u6M4dmvuupLlc1G6GB6RhebF",
	"TEeWGEInTOmQsMF5uXXZT+DInoqzqpWjn7TDqu2k4mXtdbvnOqFxrB3VDmTrIpV/2AoQuqkVUW6wznIg",
	"jtURyF6iWDKWO6td2kh1GAJ7WK3TUwn1Mf5Rrfu0nKBbfdz97OWIoM66yrvQPRZvuWr9pNbAuDkA7+Rm",
	"NRmbRPT43Aa39/S7+x37YfOxn9jvcGxeR2qHx90SAn1PJAremq96yvSwhkaxWGv6cPHLxbk/hfjibeij",
	"Mpn2q+4vJpEpwQ23ZjQeetN0znq2PtGNZBK3Hh5+A8kpLExZ79cM0snVmXblimqn1xfnvsOA7Webd3E1",
	"hQyVfprFbNXDlHK73a4t71bvPBWqNa9zre0mDYFDqEUvq2fuvhz9bHHJT+Lbrh1Tdy2cB7M/WK79VMTu",
	"UUJScqfiL9OFI5RnGjxGMoqUJnZirzprmCVmypfpcWyOLBeNBirqTq7OztI587G20ML+rP1l+uvlBtba",
	"5kccFStCrDx+y61wrhPTK+RXKj6CigqTnano8k7BrgHdyD9RfiWwnXn1rwaqCv0a9eynB58xQbErtLDP",
	"L+hX+u1HP4virtxrY8cG8jk3OdvZV9zsqJE7cPD38g7no1zfk7jV3I0LBSItRtO4OftqNY+zmgLGXc1m",
	"M639xiOSrakZml5M7SG6uPAprsf0Zw+PulizV0brmdX0YvqZ7tQaH+s9tgSq0NiYrhRpefGdHcoilgJK",
	"9Zd2u+XnTeD992wKqtuVmYcv/BmnNnrTXF7f9vSHmHaWtXxsAXwpI6XOIgkodqzeVXyySaoSYtXZYZYq",
	"0fPOY26XNs4kGdKfTHqLaGVKrXL3Ir9PDHy2NGtXqlcktywoyAJ0RdqUJ6p6gf6bFq1g42ZUf5a6O6qu",
	"aW5X/wkAAP//J8P8Ozw2AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
