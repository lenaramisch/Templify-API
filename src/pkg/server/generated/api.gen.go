//go:build go1.22

// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Send an Email with custom text
	// (POST /email)
	SendEmail(w http.ResponseWriter, r *http.Request)
	// Send an Email with attachment
	// (POST /email/attachments)
	SendEmailWithAttachment(w http.ResponseWriter, r *http.Request)
	// Get Template by Name
	// (GET /email/templates/{templateName})
	GetTemplateByName(w http.ResponseWriter, r *http.Request, templateName string)
	// Add new template
	// (POST /email/templates/{templateName})
	AddNewTemplate(w http.ResponseWriter, r *http.Request, templateName string)
	// Get Template Placeholders
	// (GET /email/templates/{templateName}/placeholders)
	GetTemplatePlaceholdersByName(w http.ResponseWriter, r *http.Request, templateName string)
	// Fill placeholders of template
	// (POST /email/templates/{templateName}/placeholders)
	FillTemplate(w http.ResponseWriter, r *http.Request, templateName string)
	// Send a templated Email with attachment
	// (POST /email/templates/{templateName}/placeholders/attachments)
	SendMJMLEmailWithAttachment(w http.ResponseWriter, r *http.Request, templateName string)
	// Get describing html of openapi spec
	// (GET /info/openapi.html)
	GetOpenAPIHTML(w http.ResponseWriter, r *http.Request)
	// Get openapi spec as json
	// (GET /info/openapi.json)
	GetOpenAPIJSON(w http.ResponseWriter, r *http.Request)
	// Get status of the service
	// (GET /info/status)
	GetStatus(w http.ResponseWriter, r *http.Request)
	// Get version info of the service
	// (GET /info/version)
	GetVersion(w http.ResponseWriter, r *http.Request)
	// Get PDF Template by Name
	// (GET /pdf/templates/{templateName})
	GetPDFTemplateByName(w http.ResponseWriter, r *http.Request, templateName string)
	// Add new PDF template
	// (POST /pdf/templates/{templateName})
	AddNewPDFTemplate(w http.ResponseWriter, r *http.Request, templateName string)
	// Get PDF Template Placeholders
	// (GET /pdf/templates/{templateName}/placeholders)
	GetPDFTemplatePlaceholdersByName(w http.ResponseWriter, r *http.Request, templateName string)
	// Fill placeholders of PDF template
	// (POST /pdf/templates/{templateName}/placeholders)
	FillPDFTemplate(w http.ResponseWriter, r *http.Request, templateName string)
	// Send a SMS with custom text
	// (POST /sms)
	SendSMS(w http.ResponseWriter, r *http.Request)
	// Get SMS Template by Name
	// (GET /sms/templates/{templateName})
	GetSMSTemplateByName(w http.ResponseWriter, r *http.Request, templateName string)
	// Add new SMS template
	// (POST /sms/templates/{templateName})
	AddNewSMSTemplate(w http.ResponseWriter, r *http.Request, templateName string)
	// Get SMS Template Placeholders
	// (GET /sms/templates/{templateName}/placeholders)
	GetSMSTemplatePlaceholdersByName(w http.ResponseWriter, r *http.Request, templateName string)
	// Fill placeholders of SMS template
	// (POST /sms/templates/{templateName}/placeholders)
	FillSMSTemplate(w http.ResponseWriter, r *http.Request, templateName string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// SendEmail operation middleware
func (siw *ServerInterfaceWrapper) SendEmail(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SendEmail(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// SendEmailWithAttachment operation middleware
func (siw *ServerInterfaceWrapper) SendEmailWithAttachment(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SendEmailWithAttachment(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetTemplateByName operation middleware
func (siw *ServerInterfaceWrapper) GetTemplateByName(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "templateName" -------------
	var templateName string

	err = runtime.BindStyledParameterWithOptions("simple", "templateName", r.PathValue("templateName"), &templateName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "templateName", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTemplateByName(w, r, templateName)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AddNewTemplate operation middleware
func (siw *ServerInterfaceWrapper) AddNewTemplate(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "templateName" -------------
	var templateName string

	err = runtime.BindStyledParameterWithOptions("simple", "templateName", r.PathValue("templateName"), &templateName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "templateName", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddNewTemplate(w, r, templateName)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetTemplatePlaceholdersByName operation middleware
func (siw *ServerInterfaceWrapper) GetTemplatePlaceholdersByName(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "templateName" -------------
	var templateName string

	err = runtime.BindStyledParameterWithOptions("simple", "templateName", r.PathValue("templateName"), &templateName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "templateName", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTemplatePlaceholdersByName(w, r, templateName)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// FillTemplate operation middleware
func (siw *ServerInterfaceWrapper) FillTemplate(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "templateName" -------------
	var templateName string

	err = runtime.BindStyledParameterWithOptions("simple", "templateName", r.PathValue("templateName"), &templateName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "templateName", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.FillTemplate(w, r, templateName)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// SendMJMLEmailWithAttachment operation middleware
func (siw *ServerInterfaceWrapper) SendMJMLEmailWithAttachment(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "templateName" -------------
	var templateName string

	err = runtime.BindStyledParameterWithOptions("simple", "templateName", r.PathValue("templateName"), &templateName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "templateName", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SendMJMLEmailWithAttachment(w, r, templateName)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetOpenAPIHTML operation middleware
func (siw *ServerInterfaceWrapper) GetOpenAPIHTML(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetOpenAPIHTML(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetOpenAPIJSON operation middleware
func (siw *ServerInterfaceWrapper) GetOpenAPIJSON(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetOpenAPIJSON(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetStatus operation middleware
func (siw *ServerInterfaceWrapper) GetStatus(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetStatus(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetVersion operation middleware
func (siw *ServerInterfaceWrapper) GetVersion(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetVersion(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetPDFTemplateByName operation middleware
func (siw *ServerInterfaceWrapper) GetPDFTemplateByName(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "templateName" -------------
	var templateName string

	err = runtime.BindStyledParameterWithOptions("simple", "templateName", r.PathValue("templateName"), &templateName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "templateName", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPDFTemplateByName(w, r, templateName)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AddNewPDFTemplate operation middleware
func (siw *ServerInterfaceWrapper) AddNewPDFTemplate(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "templateName" -------------
	var templateName string

	err = runtime.BindStyledParameterWithOptions("simple", "templateName", r.PathValue("templateName"), &templateName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "templateName", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddNewPDFTemplate(w, r, templateName)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetPDFTemplatePlaceholdersByName operation middleware
func (siw *ServerInterfaceWrapper) GetPDFTemplatePlaceholdersByName(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "templateName" -------------
	var templateName string

	err = runtime.BindStyledParameterWithOptions("simple", "templateName", r.PathValue("templateName"), &templateName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "templateName", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPDFTemplatePlaceholdersByName(w, r, templateName)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// FillPDFTemplate operation middleware
func (siw *ServerInterfaceWrapper) FillPDFTemplate(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "templateName" -------------
	var templateName string

	err = runtime.BindStyledParameterWithOptions("simple", "templateName", r.PathValue("templateName"), &templateName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "templateName", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.FillPDFTemplate(w, r, templateName)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// SendSMS operation middleware
func (siw *ServerInterfaceWrapper) SendSMS(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SendSMS(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetSMSTemplateByName operation middleware
func (siw *ServerInterfaceWrapper) GetSMSTemplateByName(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "templateName" -------------
	var templateName string

	err = runtime.BindStyledParameterWithOptions("simple", "templateName", r.PathValue("templateName"), &templateName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "templateName", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSMSTemplateByName(w, r, templateName)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AddNewSMSTemplate operation middleware
func (siw *ServerInterfaceWrapper) AddNewSMSTemplate(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "templateName" -------------
	var templateName string

	err = runtime.BindStyledParameterWithOptions("simple", "templateName", r.PathValue("templateName"), &templateName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "templateName", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddNewSMSTemplate(w, r, templateName)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetSMSTemplatePlaceholdersByName operation middleware
func (siw *ServerInterfaceWrapper) GetSMSTemplatePlaceholdersByName(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "templateName" -------------
	var templateName string

	err = runtime.BindStyledParameterWithOptions("simple", "templateName", r.PathValue("templateName"), &templateName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "templateName", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSMSTemplatePlaceholdersByName(w, r, templateName)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// FillSMSTemplate operation middleware
func (siw *ServerInterfaceWrapper) FillSMSTemplate(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "templateName" -------------
	var templateName string

	err = runtime.BindStyledParameterWithOptions("simple", "templateName", r.PathValue("templateName"), &templateName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "templateName", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.FillSMSTemplate(w, r, templateName)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       *http.ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m *http.ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m *http.ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("POST "+options.BaseURL+"/email", wrapper.SendEmail)
	m.HandleFunc("POST "+options.BaseURL+"/email/attachments", wrapper.SendEmailWithAttachment)
	m.HandleFunc("GET "+options.BaseURL+"/email/templates/{templateName}", wrapper.GetTemplateByName)
	m.HandleFunc("POST "+options.BaseURL+"/email/templates/{templateName}", wrapper.AddNewTemplate)
	m.HandleFunc("GET "+options.BaseURL+"/email/templates/{templateName}/placeholders", wrapper.GetTemplatePlaceholdersByName)
	m.HandleFunc("POST "+options.BaseURL+"/email/templates/{templateName}/placeholders", wrapper.FillTemplate)
	m.HandleFunc("POST "+options.BaseURL+"/email/templates/{templateName}/placeholders/attachments", wrapper.SendMJMLEmailWithAttachment)
	m.HandleFunc("GET "+options.BaseURL+"/info/openapi.html", wrapper.GetOpenAPIHTML)
	m.HandleFunc("GET "+options.BaseURL+"/info/openapi.json", wrapper.GetOpenAPIJSON)
	m.HandleFunc("GET "+options.BaseURL+"/info/status", wrapper.GetStatus)
	m.HandleFunc("GET "+options.BaseURL+"/info/version", wrapper.GetVersion)
	m.HandleFunc("GET "+options.BaseURL+"/pdf/templates/{templateName}", wrapper.GetPDFTemplateByName)
	m.HandleFunc("POST "+options.BaseURL+"/pdf/templates/{templateName}", wrapper.AddNewPDFTemplate)
	m.HandleFunc("GET "+options.BaseURL+"/pdf/templates/{templateName}/placeholders", wrapper.GetPDFTemplatePlaceholdersByName)
	m.HandleFunc("POST "+options.BaseURL+"/pdf/templates/{templateName}/placeholders", wrapper.FillPDFTemplate)
	m.HandleFunc("POST "+options.BaseURL+"/sms", wrapper.SendSMS)
	m.HandleFunc("GET "+options.BaseURL+"/sms/templates/{templateName}", wrapper.GetSMSTemplateByName)
	m.HandleFunc("POST "+options.BaseURL+"/sms/templates/{templateName}", wrapper.AddNewSMSTemplate)
	m.HandleFunc("GET "+options.BaseURL+"/sms/templates/{templateName}/placeholders", wrapper.GetSMSTemplatePlaceholdersByName)
	m.HandleFunc("POST "+options.BaseURL+"/sms/templates/{templateName}/placeholders", wrapper.FillSMSTemplate)

	return m
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"OXOZJpsr5OsvZ/8PAAD//8MPFvJiVwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
