//go:build go1.22

// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.2.0 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Send an Email with custom text
	// (POST /email/basic/send)
	SendEmail(w http.ResponseWriter, r *http.Request)
	// Get Template by Name
	// (GET /email/templates/{templateName})
	GetTemplateByName(w http.ResponseWriter, r *http.Request, templateName string)
	// Add new template
	// (POST /email/templates/{templateName})
	AddNewTemplate(w http.ResponseWriter, r *http.Request, templateName string)
	// Fill placeholders of template
	// (POST /email/templates/{templateName}/fill)
	FillTemplate(w http.ResponseWriter, r *http.Request, templateName string)
	// Get Template Placeholders
	// (GET /email/templates/{templateName}/placeholders)
	GetTemplatePlaceholdersByName(w http.ResponseWriter, r *http.Request, templateName string)
	// Send a templated Email
	// (POST /email/templates/{templateName}/send)
	SendTemplatedEmail(w http.ResponseWriter, r *http.Request, templateName string)
	// Get download url for a static file
	// (GET /file/download/{fileName})
	GetDownloadFileURL(w http.ResponseWriter, r *http.Request, fileName string)
	// Get upload url for a static file
	// (GET /file/upload/{fileName})
	GetUploadFileURL(w http.ResponseWriter, r *http.Request, fileName string)
	// Get describing html of openapi spec
	// (GET /info/openapi.html)
	GetOpenAPIHTML(w http.ResponseWriter, r *http.Request)
	// Get openapi spec as json
	// (GET /info/openapi.json)
	GetOpenAPIJSON(w http.ResponseWriter, r *http.Request)
	// Get status of the service
	// (GET /info/status)
	GetStatus(w http.ResponseWriter, r *http.Request)
	// Get version info of the service
	// (GET /info/version)
	GetVersion(w http.ResponseWriter, r *http.Request)
	// Get PDF Template by Name
	// (GET /pdf/templates/{templateName})
	GetPDFTemplateByName(w http.ResponseWriter, r *http.Request, templateName string)
	// Add new PDF template
	// (POST /pdf/templates/{templateName})
	AddNewPDFTemplate(w http.ResponseWriter, r *http.Request, templateName string)
	// Fill placeholders of PDF template
	// (POST /pdf/templates/{templateName}/fill)
	FillPDFTemplate(w http.ResponseWriter, r *http.Request, templateName string)
	// Get PDF Template Placeholders
	// (GET /pdf/templates/{templateName}/placeholders)
	GetPDFTemplatePlaceholdersByName(w http.ResponseWriter, r *http.Request, templateName string)
	// Send a SMS with custom text
	// (POST /sms/basic/send)
	SendBasicSMS(w http.ResponseWriter, r *http.Request)
	// Send a templated SMS with custom text
	// (POST /sms/template/{templateName}/send)
	SendTemplatedSMS(w http.ResponseWriter, r *http.Request, templateName string)
	// Get SMS Template by Name
	// (GET /sms/templates/{templateName})
	GetSMSTemplateByName(w http.ResponseWriter, r *http.Request, templateName string)
	// Add new SMS template
	// (POST /sms/templates/{templateName})
	AddNewSMSTemplate(w http.ResponseWriter, r *http.Request, templateName string)
	// Fill placeholders of SMS template
	// (POST /sms/templates/{templateName}/fill)
	FillSMSTemplate(w http.ResponseWriter, r *http.Request, templateName string)
	// Get SMS Template Placeholders
	// (GET /sms/templates/{templateName}/placeholders)
	GetSMSTemplatePlaceholdersByName(w http.ResponseWriter, r *http.Request, templateName string)
	// Get Workflow by Name
	// (GET /workflow/{workflowName})
	GetWorkflowByName(w http.ResponseWriter, r *http.Request, workflowName string)
	// Create a new workflow
	// (POST /workflow/{workflowName})
	CreateWorkflow(w http.ResponseWriter, r *http.Request, workflowName string)
	// Use workflow
	// (POST /workflow/{workflowName}/send)
	UseWorkflow(w http.ResponseWriter, r *http.Request, workflowName string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// SendEmail operation middleware
func (siw *ServerInterfaceWrapper) SendEmail(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SendEmail(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetTemplateByName operation middleware
func (siw *ServerInterfaceWrapper) GetTemplateByName(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "templateName" -------------
	var templateName string

	err = runtime.BindStyledParameterWithOptions("simple", "templateName", r.PathValue("templateName"), &templateName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "templateName", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTemplateByName(w, r, templateName)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AddNewTemplate operation middleware
func (siw *ServerInterfaceWrapper) AddNewTemplate(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "templateName" -------------
	var templateName string

	err = runtime.BindStyledParameterWithOptions("simple", "templateName", r.PathValue("templateName"), &templateName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "templateName", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddNewTemplate(w, r, templateName)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// FillTemplate operation middleware
func (siw *ServerInterfaceWrapper) FillTemplate(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "templateName" -------------
	var templateName string

	err = runtime.BindStyledParameterWithOptions("simple", "templateName", r.PathValue("templateName"), &templateName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "templateName", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.FillTemplate(w, r, templateName)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetTemplatePlaceholdersByName operation middleware
func (siw *ServerInterfaceWrapper) GetTemplatePlaceholdersByName(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "templateName" -------------
	var templateName string

	err = runtime.BindStyledParameterWithOptions("simple", "templateName", r.PathValue("templateName"), &templateName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "templateName", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTemplatePlaceholdersByName(w, r, templateName)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// SendTemplatedEmail operation middleware
func (siw *ServerInterfaceWrapper) SendTemplatedEmail(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "templateName" -------------
	var templateName string

	err = runtime.BindStyledParameterWithOptions("simple", "templateName", r.PathValue("templateName"), &templateName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "templateName", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SendTemplatedEmail(w, r, templateName)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetDownloadFileURL operation middleware
func (siw *ServerInterfaceWrapper) GetDownloadFileURL(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "fileName" -------------
	var fileName string

	err = runtime.BindStyledParameterWithOptions("simple", "fileName", r.PathValue("fileName"), &fileName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "fileName", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetDownloadFileURL(w, r, fileName)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetUploadFileURL operation middleware
func (siw *ServerInterfaceWrapper) GetUploadFileURL(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "fileName" -------------
	var fileName string

	err = runtime.BindStyledParameterWithOptions("simple", "fileName", r.PathValue("fileName"), &fileName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "fileName", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUploadFileURL(w, r, fileName)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetOpenAPIHTML operation middleware
func (siw *ServerInterfaceWrapper) GetOpenAPIHTML(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetOpenAPIHTML(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetOpenAPIJSON operation middleware
func (siw *ServerInterfaceWrapper) GetOpenAPIJSON(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetOpenAPIJSON(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetStatus operation middleware
func (siw *ServerInterfaceWrapper) GetStatus(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetStatus(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetVersion operation middleware
func (siw *ServerInterfaceWrapper) GetVersion(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetVersion(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetPDFTemplateByName operation middleware
func (siw *ServerInterfaceWrapper) GetPDFTemplateByName(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "templateName" -------------
	var templateName string

	err = runtime.BindStyledParameterWithOptions("simple", "templateName", r.PathValue("templateName"), &templateName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "templateName", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPDFTemplateByName(w, r, templateName)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AddNewPDFTemplate operation middleware
func (siw *ServerInterfaceWrapper) AddNewPDFTemplate(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "templateName" -------------
	var templateName string

	err = runtime.BindStyledParameterWithOptions("simple", "templateName", r.PathValue("templateName"), &templateName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "templateName", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddNewPDFTemplate(w, r, templateName)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// FillPDFTemplate operation middleware
func (siw *ServerInterfaceWrapper) FillPDFTemplate(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "templateName" -------------
	var templateName string

	err = runtime.BindStyledParameterWithOptions("simple", "templateName", r.PathValue("templateName"), &templateName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "templateName", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.FillPDFTemplate(w, r, templateName)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetPDFTemplatePlaceholdersByName operation middleware
func (siw *ServerInterfaceWrapper) GetPDFTemplatePlaceholdersByName(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "templateName" -------------
	var templateName string

	err = runtime.BindStyledParameterWithOptions("simple", "templateName", r.PathValue("templateName"), &templateName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "templateName", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPDFTemplatePlaceholdersByName(w, r, templateName)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// SendBasicSMS operation middleware
func (siw *ServerInterfaceWrapper) SendBasicSMS(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SendBasicSMS(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// SendTemplatedSMS operation middleware
func (siw *ServerInterfaceWrapper) SendTemplatedSMS(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "templateName" -------------
	var templateName string

	err = runtime.BindStyledParameterWithOptions("simple", "templateName", r.PathValue("templateName"), &templateName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "templateName", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SendTemplatedSMS(w, r, templateName)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetSMSTemplateByName operation middleware
func (siw *ServerInterfaceWrapper) GetSMSTemplateByName(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "templateName" -------------
	var templateName string

	err = runtime.BindStyledParameterWithOptions("simple", "templateName", r.PathValue("templateName"), &templateName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "templateName", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSMSTemplateByName(w, r, templateName)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AddNewSMSTemplate operation middleware
func (siw *ServerInterfaceWrapper) AddNewSMSTemplate(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "templateName" -------------
	var templateName string

	err = runtime.BindStyledParameterWithOptions("simple", "templateName", r.PathValue("templateName"), &templateName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "templateName", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddNewSMSTemplate(w, r, templateName)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// FillSMSTemplate operation middleware
func (siw *ServerInterfaceWrapper) FillSMSTemplate(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "templateName" -------------
	var templateName string

	err = runtime.BindStyledParameterWithOptions("simple", "templateName", r.PathValue("templateName"), &templateName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "templateName", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.FillSMSTemplate(w, r, templateName)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetSMSTemplatePlaceholdersByName operation middleware
func (siw *ServerInterfaceWrapper) GetSMSTemplatePlaceholdersByName(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "templateName" -------------
	var templateName string

	err = runtime.BindStyledParameterWithOptions("simple", "templateName", r.PathValue("templateName"), &templateName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "templateName", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSMSTemplatePlaceholdersByName(w, r, templateName)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetWorkflowByName operation middleware
func (siw *ServerInterfaceWrapper) GetWorkflowByName(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "workflowName" -------------
	var workflowName string

	err = runtime.BindStyledParameterWithOptions("simple", "workflowName", r.PathValue("workflowName"), &workflowName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "workflowName", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetWorkflowByName(w, r, workflowName)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateWorkflow operation middleware
func (siw *ServerInterfaceWrapper) CreateWorkflow(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "workflowName" -------------
	var workflowName string

	err = runtime.BindStyledParameterWithOptions("simple", "workflowName", r.PathValue("workflowName"), &workflowName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "workflowName", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateWorkflow(w, r, workflowName)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UseWorkflow operation middleware
func (siw *ServerInterfaceWrapper) UseWorkflow(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "workflowName" -------------
	var workflowName string

	err = runtime.BindStyledParameterWithOptions("simple", "workflowName", r.PathValue("workflowName"), &workflowName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "workflowName", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UseWorkflow(w, r, workflowName)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       *http.ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m *http.ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m *http.ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("POST "+options.BaseURL+"/email/basic/send", wrapper.SendEmail)
	m.HandleFunc("GET "+options.BaseURL+"/email/templates/{templateName}", wrapper.GetTemplateByName)
	m.HandleFunc("POST "+options.BaseURL+"/email/templates/{templateName}", wrapper.AddNewTemplate)
	m.HandleFunc("POST "+options.BaseURL+"/email/templates/{templateName}/fill", wrapper.FillTemplate)
	m.HandleFunc("GET "+options.BaseURL+"/email/templates/{templateName}/placeholders", wrapper.GetTemplatePlaceholdersByName)
	m.HandleFunc("POST "+options.BaseURL+"/email/templates/{templateName}/send", wrapper.SendTemplatedEmail)
	m.HandleFunc("GET "+options.BaseURL+"/file/download/{fileName}", wrapper.GetDownloadFileURL)
	m.HandleFunc("GET "+options.BaseURL+"/file/upload/{fileName}", wrapper.GetUploadFileURL)
	m.HandleFunc("GET "+options.BaseURL+"/info/openapi.html", wrapper.GetOpenAPIHTML)
	m.HandleFunc("GET "+options.BaseURL+"/info/openapi.json", wrapper.GetOpenAPIJSON)
	m.HandleFunc("GET "+options.BaseURL+"/info/status", wrapper.GetStatus)
	m.HandleFunc("GET "+options.BaseURL+"/info/version", wrapper.GetVersion)
	m.HandleFunc("GET "+options.BaseURL+"/pdf/templates/{templateName}", wrapper.GetPDFTemplateByName)
	m.HandleFunc("POST "+options.BaseURL+"/pdf/templates/{templateName}", wrapper.AddNewPDFTemplate)
	m.HandleFunc("POST "+options.BaseURL+"/pdf/templates/{templateName}/fill", wrapper.FillPDFTemplate)
	m.HandleFunc("GET "+options.BaseURL+"/pdf/templates/{templateName}/placeholders", wrapper.GetPDFTemplatePlaceholdersByName)
	m.HandleFunc("POST "+options.BaseURL+"/sms/basic/send", wrapper.SendBasicSMS)
	m.HandleFunc("POST "+options.BaseURL+"/sms/template/{templateName}/send", wrapper.SendTemplatedSMS)
	m.HandleFunc("GET "+options.BaseURL+"/sms/templates/{templateName}", wrapper.GetSMSTemplateByName)
	m.HandleFunc("POST "+options.BaseURL+"/sms/templates/{templateName}", wrapper.AddNewSMSTemplate)
	m.HandleFunc("POST "+options.BaseURL+"/sms/templates/{templateName}/fill", wrapper.FillSMSTemplate)
	m.HandleFunc("GET "+options.BaseURL+"/sms/templates/{templateName}/placeholders", wrapper.GetSMSTemplatePlaceholdersByName)
	m.HandleFunc("GET "+options.BaseURL+"/workflow/{workflowName}", wrapper.GetWorkflowByName)
	m.HandleFunc("POST "+options.BaseURL+"/workflow/{workflowName}", wrapper.CreateWorkflow)
	m.HandleFunc("POST "+options.BaseURL+"/workflow/{workflowName}/send", wrapper.UseWorkflow)

	return m
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xc/2/bNhb/V3jcAd3hXH9JnXUNUGBpUrfZNZkRJyt2S36gJTrmKomaSNnxBf7fDyRF",
	"iZIoyd+axV2AApVF8vHxvQ/fN1J5gA71QxrggDN49ACZM8U+ko/vfUS8oYccPKWeiyP5Et8jP/SweAxz",
	"Tb8/QBdxJB++4AU8ghMSMX6BfAxbcIa8GMMjCJct3ewhS+vt8nbZgmFEQxxxgll5ngdIOPZVQ66bmt1o",
	"TlndjqMiO7LvA+SLUHRgPCLBHVymQ0otyxaM8J8xibALj36Xw3Xn25buTMd/YIcLMskLFEVoIQc39zDJ",
	"54Rloy+1OsKBe4n/jDHjZUEizpEz9TUiKsSd9TqhAccBz4kcjhHDP/QBDhzqYhdkvWGrLLqs9f09xwEj",
	"NMhT4/cN46TackPqZizIrLyUEmk7j836a0EfM4buCswNSOACPsWATwme/MO2NhYrkrlxF3gOThDDtgGc",
	"StXmB0yp52P2k4s5djiZ4bZDffvgsgRHUxx51PkCPkoijWLUDKTUskVkYqiE5BX2Qw9xXEZaUOLsvXpK",
	"JikvJiF1/vP5pxPqFgbfxN3uK8f/w/fkE9a/X46puyi8YkJqNCi8dagX+8WXHN9zMKEBf8nI//DbG3jQ",
	"De9vIHCoR6O3N/C7Qf/wff/VDVSdJsgn3uLtDZxib4Y5cdCN4gx/xJ5HwWcaea4i3kmomxN2rGx07Cx3",
	"LIvrZAJoVGyQyLko1kZdDoj3bGoez9QUHSVyXSKwgLxhTp6lxRlO/ViYKtg/hC2oFloyAzaX9I0Zq9Wc",
	"qEb5kDJeiXDCxHbJ8cqjGKc0x5R6GAWm2Ropjh/LaKlXv9E4AkIQR+DhoS0elssWOL5Tv4/v8HL5RKxR",
	"QUwtLWKbnoQBMh2Li5kTkZDLXQ+PQaTUBjgFE+J5AAFNHcwJnwITCO2bADaFpo+34zSf5Z2QPKXLtsnT",
	"Kijs5mB9iVlIA7a/3hP8VYBtwQ+Yf6bRl4lH56YY8+DBMhK3Wc4kvgGj1CKVAVSMmf4Z4Qk8gt91snyu",
	"kyRzHd3vLJhQMXjtiCp0J5pG3lGvM2vRXTGOOHGOK0KAEqCPa/16bVKUBDA5gRdFWFikjT2bhRmeDtTe",
	"qd82hRhleDoQBscq6+Hp4Dnp/saS7uHp4CvkN7ZA4S048QgOeIMvXzfmT6ZqWFttJLQK1zc3wZZ8r8Jw",
	"pq3H9dnDCDNyF2D3+vJTWT5x5FntXjuOvE7v4FX/8IfXP77pNkpA0LEte3Q+WsVSKQdaWE4LLGgMUIRB",
	"/xAsMIoYoJ7btoFzdD56Nl/fmPkanY9q03hrjeuUBi9ETBfdYRlgj+MFYNTHwCfeF2vJK8IOJjMcDac0",
	"wBexP1YbNCP57/6b3mHvdfeHfvfw4KBxJ9jo1VeiRuejR7LTapulZq4Nfks2mLZ0tdtsY2NtLHBjY71T",
	"1tfjuRaFxT1fF5uaPuDRkNe8zzjiMSsnqldTDJhsA3Qi68bHwzMRwQaxL6b7+P7409XH32ALXl+Yz/+5",
	"+OXzhZjJUF7aXIKrWbXbvZDXtTm57KGRjcxu60dj8h5sWd4eiGlTw9+QUKyQcNutQAXck86NUvgVR7pE",
	"WYQEYUD1A4IA07AAMzUECN/WhrmwZRwTzz2Vxg0edA+6L7u9l10hHYf6PuGllqtu90j++2/a5yNiU3gE",
	"u26v3+8jd/ym9xojx3nde3XQm/QOfuy96fYnr3vOIX71+kcHwRZ0MUfEY5pnwgAKBKOCt5leHuy1u+0u",
	"LPlxg2PbpnARx3LhIq0Cc8SAGMDNVecXWlKzufLKGZJNp/pWEM/JqmIaJTzbNFPEpjXTrCHu0tSp/Mvl",
	"L+N3wbCkM2udaXRNaCSf7wHD0Yw4Vsc3q0YtTvFZMaECQtM+0jO0DIRkS83JO6dj2x7TlZqTCMuouMLy",
	"VZdrLvEdYTxCUo4nNJiQyJc/Ggs3G1TvyoUJQaShdtIO3Ulz1SQzcu5a1OuYrQ08y7KoWl0Na4W6Tp2G",
	"a8OHtSpqucLypgWyIpGSNmyHJMnTT1qza5yRrOWoyucjeQGV5SxIkMRbOzTgKNknag2QxWFII15gXAXV",
	"UJiWkeoAWyoVhlPOw6NOx+y/bEGPODhJWpOxcZC8c9Oh8/m8XRjHCVcHRecjMFKmK7E9FidEQxygkMAj",
	"+Krdbb8SnhrxqVRoR66nM0aMOB2GA1ciiSpE5a2dgJtwdlKS6kCBRvJ/GnPjnJKB8QLckRkJ7qRJjLBD",
	"QiIbhBMHiIE59jzxv2hOEhjgpCeIAsbS4Jy5ybRaeckBxzvqLrRakvNTFIYeceSozh9MGWsFzCbYlm6Q",
	"LPPg4VGM5QtVXpBSO+j2yvJRcmGCoWUL9rvdcpd3yNWHNBKiDDtxRPgCHv1+24Is9n0ULeyidmLGqQ84",
	"Vge66I4JXCvB3ApaiSa1YWGdBzM6Wwpm7rBFrR8wBwiwEDtkQpzsxGi8AIQzkCRjeZ18wFzvnHcLHfyh",
	"CPmYp5WQ3CSij3SRmjqnIMI8joKctyxbYCJGC7Rmm6sQdOY11TK0XjQJtyUtdneLosz6LWWkYkqAxY6D",
	"GZvEHkhlWYmTs2CGPOJK4QNhaTyCXdW7X+59ggIQUA4m8hqOlvD36ZOg8q9avAkMXBmK1za1gLJWhWU4",
	"dl2AQIDnOf2Kze2OS9g5dt0LPDcPKtYFDnLdx0bNVzI7tuLFpubn2HWxqf5E6+shrAYjQsmmijeyQp0J",
	"8bxqFyNCCIkbM5MU6rcYqHYJWbkAZANcSd72Ajy22sZKuCkaPOFOOqGHyBqT1x2u79Tw0UgFDCvBU0Kn",
	"CJvtsFqsylS7T8vUNpfKp4iDKZpJtI2xBBx2lX+XtWRZwK9xtuZRxLPjzexo7ohmr51vbiUboXaVID5l",
	"1K2I5teK4A3oA3mqw6xBvF5jGs0/O/7SldInk3sUEVKBxQnxcMel88CjyO08iJ+rZBuhPjoG15efhGY1",
	"CWE2ZcVE3ycpmcLTpOeAePj68tOqMBLkzIlsOErKShYM6XU9GauXO3vf1uAJZFyugAyhu1RRceTJ6mlR",
	"YRolw9OBiZE43BIhikB+OsmAAGkEYmZFy3W4BVbUlM9I2QwpicJWxwkJJrSTlKraU+57lRC5xDwieKbO",
	"Sn4JcXA8PJPhlvBIH6/OP9mgkPRLmleJizUPmaCLF0dFD3Vtst1uJ1cps3eWqmRJ/FfSvQYujrArWU+P",
	"JMx1NW9LSXQsHLaYX6A4kaQan8n7eHgmzyAtMtfAWl/mP49+uaiRedK8Acaz076lZQOZpdqyWK1MNgnS",
	"lJoYJBmplR5LT7mb5ZY/9c6OnEqCS47Ov6JdSGaokJ2d0SbhVS2vRnrG2Vqz+PRZmxi5ghB/TU/VtkLe",
	"Xpwzr6Z0LZEKrRfOMldVe71a7MoP3cnWperh6WDlcrVxrfM5cVaBgXGJdx9TZqH9mpq1iiuaK9Y5EKVV",
	"6zY4m8hLonMUcNnPIwFmgATibZSOaInAE7y4uQleiDZl44Xy2mBAo3xRSPSUHRYBR/fgxcND22hXt89e",
	"tCvq5aa2/q6Zc8XV7KdeMDcRZg1862zhDgrmhfnLNfMtsZWUzfccXH9pSb36s5snVlDfDsu7Kqjnbfam",
	"RXXTnOy2rr5HIcDeV85zYUBF9TyDJ/PZGnddwOh8pICE9P0LfVtFfuG50T2X5AZHuT7+TvA1Oh99pXsu",
	"ha8eNvWaQiRSdk0g0JfGQTilAQaBvDa+mukpSt9+90WIKtOqhs2WxyG71Pi65yJK9xv5X4ACV6ll7x1x",
	"xfcRe4BXC4rWQe6mabCYbNU02BDucxpchNte+j+h/Zo0WEGtOQ3Ogajp8pYps79rMlrx6dlTT0ZNPa9t",
	"kXaQjJrz229wbQmu/bnEtY2j20XSWf0F9RNLOrfD7K6SzryF3DTpNM3Gxkln0VjvXeJZ/Kp+7x1vReKZ",
	"QXSefLPTedBPa8V4elBTfKc/DVoPTyn12uBO07bjzFzWk8GZ7Q8X/YVYS+X8ffq0GtY+G+ovBHipVqqj",
	"PPUlYBLopTNPaCQTI5HMyiuFrHQLMLmxgYxtYv5BwnI6q2YygLIn8Nu9c7d/hbm6b89LKtW/I8m5W1/y",
	"s0LCjqoa69VQXLlmYgZTu6L/zsB2zbZCmrox9o3AbLMAsgJkMdsBwoTyG4AlR0czu8rkrQfVnH4H2ZF/",
	"iyYhVboCO8PRgk+FOdNXqHTtR7zLLiQkqhS+edlagUp6t9ZOR12HXYnS8HSQXPayUhqeDix0PuAAR8iT",
	"n6uTYEKzj7Gzj02Tv0nXwII0HuKH2GMxE09aHSwjl2poebv8fwAAAP//+fvQwU9dAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
