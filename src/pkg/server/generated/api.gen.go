//go:build go1.22

// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Send an Email with custom text
	// (POST /email)
	SendEmail(w http.ResponseWriter, r *http.Request)
	// Send an Email with attachment
	// (POST /email/attachments)
	SendEmailWithAttachment(w http.ResponseWriter, r *http.Request)
	// Get Template by Name
	// (GET /email/templates/{templateName})
	GetTemplateByName(w http.ResponseWriter, r *http.Request, templateName string)
	// Add new template
	// (POST /email/templates/{templateName})
	AddNewTemplate(w http.ResponseWriter, r *http.Request, templateName string)
	// Get Template Placeholders
	// (GET /email/templates/{templateName}/placeholders)
	GetTemplatePlaceholdersByName(w http.ResponseWriter, r *http.Request, templateName string)
	// Fill placeholders of template
	// (POST /email/templates/{templateName}/placeholders)
	FillTemplate(w http.ResponseWriter, r *http.Request, templateName string)
	// Send a templated Email with attachment
	// (POST /email/templates/{templateName}/placeholders/attachments)
	SendMJMLEmailWithAttachment(w http.ResponseWriter, r *http.Request, templateName string)
	// Get describing html of openapi spec
	// (GET /info/openapi.html)
	GetOpenAPIHTML(w http.ResponseWriter, r *http.Request)
	// Get openapi spec as json
	// (GET /info/openapi.json)
	GetOpenAPIJSON(w http.ResponseWriter, r *http.Request)
	// Get status of the service
	// (GET /info/status)
	GetStatus(w http.ResponseWriter, r *http.Request)
	// Get version info of the service
	// (GET /info/version)
	GetVersion(w http.ResponseWriter, r *http.Request)
	// Get PDF Template by Name
	// (GET /pdf/templates/{templateName})
	GetPDFTemplateByName(w http.ResponseWriter, r *http.Request, templateName string)
	// Add new PDF template
	// (POST /pdf/templates/{templateName})
	AddNewPDFTemplate(w http.ResponseWriter, r *http.Request, templateName string)
	// Get PDF Template Placeholders
	// (GET /pdf/templates/{templateName}/placeholders)
	GetPDFTemplatePlaceholdersByName(w http.ResponseWriter, r *http.Request, templateName string)
	// Fill placeholders of PDF template
	// (POST /pdf/templates/{templateName}/placeholders)
	FillPDFTemplate(w http.ResponseWriter, r *http.Request, templateName string)
	// Send a SMS with custom text
	// (POST /sms)
	SendSMS(w http.ResponseWriter, r *http.Request)
	// Get SMS Template by Name
	// (GET /sms/templates/{templateName})
	GetSMSTemplateByName(w http.ResponseWriter, r *http.Request, templateName string)
	// Add new SMS template
	// (POST /sms/templates/{templateName})
	AddNewSMSTemplate(w http.ResponseWriter, r *http.Request, templateName string)
	// Get SMS Template Placeholders
	// (GET /sms/templates/{templateName}/placeholders)
	GetSMSTemplatePlaceholdersByName(w http.ResponseWriter, r *http.Request, templateName string)
	// Fill placeholders of SMS template
	// (POST /sms/templates/{templateName}/placeholders)
	FillSMSTemplate(w http.ResponseWriter, r *http.Request, templateName string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// SendEmail operation middleware
func (siw *ServerInterfaceWrapper) SendEmail(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SendEmail(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// SendEmailWithAttachment operation middleware
func (siw *ServerInterfaceWrapper) SendEmailWithAttachment(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SendEmailWithAttachment(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetTemplateByName operation middleware
func (siw *ServerInterfaceWrapper) GetTemplateByName(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "templateName" -------------
	var templateName string

	err = runtime.BindStyledParameterWithOptions("simple", "templateName", r.PathValue("templateName"), &templateName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "templateName", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTemplateByName(w, r, templateName)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AddNewTemplate operation middleware
func (siw *ServerInterfaceWrapper) AddNewTemplate(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "templateName" -------------
	var templateName string

	err = runtime.BindStyledParameterWithOptions("simple", "templateName", r.PathValue("templateName"), &templateName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "templateName", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddNewTemplate(w, r, templateName)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetTemplatePlaceholdersByName operation middleware
func (siw *ServerInterfaceWrapper) GetTemplatePlaceholdersByName(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "templateName" -------------
	var templateName string

	err = runtime.BindStyledParameterWithOptions("simple", "templateName", r.PathValue("templateName"), &templateName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "templateName", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTemplatePlaceholdersByName(w, r, templateName)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// FillTemplate operation middleware
func (siw *ServerInterfaceWrapper) FillTemplate(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "templateName" -------------
	var templateName string

	err = runtime.BindStyledParameterWithOptions("simple", "templateName", r.PathValue("templateName"), &templateName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "templateName", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.FillTemplate(w, r, templateName)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// SendMJMLEmailWithAttachment operation middleware
func (siw *ServerInterfaceWrapper) SendMJMLEmailWithAttachment(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "templateName" -------------
	var templateName string

	err = runtime.BindStyledParameterWithOptions("simple", "templateName", r.PathValue("templateName"), &templateName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "templateName", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SendMJMLEmailWithAttachment(w, r, templateName)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetOpenAPIHTML operation middleware
func (siw *ServerInterfaceWrapper) GetOpenAPIHTML(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetOpenAPIHTML(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetOpenAPIJSON operation middleware
func (siw *ServerInterfaceWrapper) GetOpenAPIJSON(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetOpenAPIJSON(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetStatus operation middleware
func (siw *ServerInterfaceWrapper) GetStatus(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetStatus(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetVersion operation middleware
func (siw *ServerInterfaceWrapper) GetVersion(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetVersion(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetPDFTemplateByName operation middleware
func (siw *ServerInterfaceWrapper) GetPDFTemplateByName(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "templateName" -------------
	var templateName string

	err = runtime.BindStyledParameterWithOptions("simple", "templateName", r.PathValue("templateName"), &templateName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "templateName", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPDFTemplateByName(w, r, templateName)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AddNewPDFTemplate operation middleware
func (siw *ServerInterfaceWrapper) AddNewPDFTemplate(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "templateName" -------------
	var templateName string

	err = runtime.BindStyledParameterWithOptions("simple", "templateName", r.PathValue("templateName"), &templateName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "templateName", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddNewPDFTemplate(w, r, templateName)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetPDFTemplatePlaceholdersByName operation middleware
func (siw *ServerInterfaceWrapper) GetPDFTemplatePlaceholdersByName(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "templateName" -------------
	var templateName string

	err = runtime.BindStyledParameterWithOptions("simple", "templateName", r.PathValue("templateName"), &templateName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "templateName", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPDFTemplatePlaceholdersByName(w, r, templateName)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// FillPDFTemplate operation middleware
func (siw *ServerInterfaceWrapper) FillPDFTemplate(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "templateName" -------------
	var templateName string

	err = runtime.BindStyledParameterWithOptions("simple", "templateName", r.PathValue("templateName"), &templateName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "templateName", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.FillPDFTemplate(w, r, templateName)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// SendSMS operation middleware
func (siw *ServerInterfaceWrapper) SendSMS(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SendSMS(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetSMSTemplateByName operation middleware
func (siw *ServerInterfaceWrapper) GetSMSTemplateByName(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "templateName" -------------
	var templateName string

	err = runtime.BindStyledParameterWithOptions("simple", "templateName", r.PathValue("templateName"), &templateName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "templateName", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSMSTemplateByName(w, r, templateName)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AddNewSMSTemplate operation middleware
func (siw *ServerInterfaceWrapper) AddNewSMSTemplate(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "templateName" -------------
	var templateName string

	err = runtime.BindStyledParameterWithOptions("simple", "templateName", r.PathValue("templateName"), &templateName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "templateName", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddNewSMSTemplate(w, r, templateName)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetSMSTemplatePlaceholdersByName operation middleware
func (siw *ServerInterfaceWrapper) GetSMSTemplatePlaceholdersByName(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "templateName" -------------
	var templateName string

	err = runtime.BindStyledParameterWithOptions("simple", "templateName", r.PathValue("templateName"), &templateName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "templateName", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSMSTemplatePlaceholdersByName(w, r, templateName)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// FillSMSTemplate operation middleware
func (siw *ServerInterfaceWrapper) FillSMSTemplate(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "templateName" -------------
	var templateName string

	err = runtime.BindStyledParameterWithOptions("simple", "templateName", r.PathValue("templateName"), &templateName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "templateName", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.FillSMSTemplate(w, r, templateName)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       *http.ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m *http.ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m *http.ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("POST "+options.BaseURL+"/email", wrapper.SendEmail)
	m.HandleFunc("POST "+options.BaseURL+"/email/attachments", wrapper.SendEmailWithAttachment)
	m.HandleFunc("GET "+options.BaseURL+"/email/templates/{templateName}", wrapper.GetTemplateByName)
	m.HandleFunc("POST "+options.BaseURL+"/email/templates/{templateName}", wrapper.AddNewTemplate)
	m.HandleFunc("GET "+options.BaseURL+"/email/templates/{templateName}/placeholders", wrapper.GetTemplatePlaceholdersByName)
	m.HandleFunc("POST "+options.BaseURL+"/email/templates/{templateName}/placeholders", wrapper.FillTemplate)
	m.HandleFunc("POST "+options.BaseURL+"/email/templates/{templateName}/placeholders/attachments", wrapper.SendMJMLEmailWithAttachment)
	m.HandleFunc("GET "+options.BaseURL+"/info/openapi.html", wrapper.GetOpenAPIHTML)
	m.HandleFunc("GET "+options.BaseURL+"/info/openapi.json", wrapper.GetOpenAPIJSON)
	m.HandleFunc("GET "+options.BaseURL+"/info/status", wrapper.GetStatus)
	m.HandleFunc("GET "+options.BaseURL+"/info/version", wrapper.GetVersion)
	m.HandleFunc("GET "+options.BaseURL+"/pdf/templates/{templateName}", wrapper.GetPDFTemplateByName)
	m.HandleFunc("POST "+options.BaseURL+"/pdf/templates/{templateName}", wrapper.AddNewPDFTemplate)
	m.HandleFunc("GET "+options.BaseURL+"/pdf/templates/{templateName}/placeholders", wrapper.GetPDFTemplatePlaceholdersByName)
	m.HandleFunc("POST "+options.BaseURL+"/pdf/templates/{templateName}/placeholders", wrapper.FillPDFTemplate)
	m.HandleFunc("POST "+options.BaseURL+"/sms", wrapper.SendSMS)
	m.HandleFunc("GET "+options.BaseURL+"/sms/templates/{templateName}", wrapper.GetSMSTemplateByName)
	m.HandleFunc("POST "+options.BaseURL+"/sms/templates/{templateName}", wrapper.AddNewSMSTemplate)
	m.HandleFunc("GET "+options.BaseURL+"/sms/templates/{templateName}/placeholders", wrapper.GetSMSTemplatePlaceholdersByName)
	m.HandleFunc("POST "+options.BaseURL+"/sms/templates/{templateName}/placeholders", wrapper.FillSMSTemplate)

	return m
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
